// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: Documents/OLC2_CUNOC/music-player/src/main/java/interpreter/lexer/MusicLanguage.jflex

package interpreter.lexer;

import java_cup.runtime.*;
import java.util.LinkedList;
import java.util.Stack;
import interpreter.abstract_syntax_tree.environment.GlobalError;
import interpreter.parser.sym;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class MusicLexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int IDENTACION = 2;
  public static final int STRING = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2, 2
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\12\u1f00\1\u2000\1\u2100\1\u2200\1\u1f00\1\u2300"+
    "\1\u2400\2\u1f00\31\u0100\1\u2500\121\u0100\1\u2600\4\u0100\1\u2700"+
    "\1\u0100\1\u2800\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00\53\u0100"+
    "\1\u2e00\10\u2f00\31\u1f00\1\u0100\1\u3000\1\u3100\1\u0100\1\u3200"+
    "\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900\1\u3a00"+
    "\1\u0100\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000\3\u1f00"+
    "\1\u4100\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700\1\u4800"+
    "\1\u4900\1\u1f00\1\u4a00\1\u1f00\1\u4b00\1\u4c00\2\u1f00\3\u0100"+
    "\1\u4d00\1\u4e00\1\u4f00\12\u1f00\4\u0100\1\u5000\17\u1f00\2\u0100"+
    "\1\u5100\41\u1f00\2\u0100\1\u5200\1\u5300\3\u1f00\1\u5400\27\u0100"+
    "\1\u5500\2\u0100\1\u5600\45\u1f00\1\u0100\1\u5700\1\u5800\11\u1f00"+
    "\1\u5900\24\u1f00\1\u5a00\1\u5b00\1\u1f00\1\u5c00\1\u5d00\1\u5e00"+
    "\1\u5f00\2\u1f00\1\u6000\5\u1f00\1\u6100\7\u1f00\1\u6200\1\u6300"+
    "\4\u1f00\1\u6400\21\u1f00\246\u0100\1\u6500\20\u0100\1\u6600\1\u6700"+
    "\25\u0100\1\u6800\34\u0100\1\u6900\14\u1f00\2\u0100\1\u6a00\u0b05\u1f00"+
    "\1\u6b00\1\u6c00\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\5\16\0\4\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\11\30\1\6\1\31\1\32\1\33\1\34\2\6"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\13\1\43"+
    "\1\44\1\13\1\45\1\46\1\47\1\13\1\50\1\51"+
    "\1\13\1\52\1\53\1\54\1\13\1\55\4\13\1\56"+
    "\1\6\1\57\1\60\1\13\1\6\1\61\1\62\1\63"+
    "\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1\45"+
    "\1\73\1\74\1\75\1\76\1\77\1\13\1\100\1\101"+
    "\1\102\1\103\1\55\1\104\1\105\1\13\1\106\1\107"+
    "\1\110\1\111\1\6\6\0\1\112\32\0\2\6\4\13"+
    "\4\6\1\13\2\6\1\0\7\6\1\13\4\6\1\13"+
    "\5\6\27\13\1\6\37\13\1\6\u01ca\13\4\6\14\13"+
    "\16\6\5\13\7\6\1\13\1\6\1\13\21\6\160\0"+
    "\5\13\1\6\2\13\2\6\4\13\1\6\1\13\6\6"+
    "\1\13\1\6\3\13\1\6\1\13\1\6\24\13\1\6"+
    "\123\13\1\6\213\13\1\6\5\0\2\6\246\13\1\6"+
    "\46\13\2\6\1\13\7\6\47\13\7\6\1\13\1\6"+
    "\55\0\1\6\1\0\1\6\2\0\1\6\2\0\1\6"+
    "\1\0\10\6\33\13\5\6\3\13\15\6\6\0\5\6"+
    "\1\13\4\6\13\0\1\6\1\0\3\6\53\13\37\0"+
    "\4\6\2\13\1\0\143\13\1\6\1\13\10\0\1\6"+
    "\6\0\2\13\2\0\1\6\4\0\2\13\12\0\3\13"+
    "\2\6\1\13\17\6\1\0\1\13\1\0\36\13\33\0"+
    "\2\6\131\13\13\0\1\13\16\6\12\0\41\13\11\0"+
    "\2\13\4\6\1\13\5\6\26\13\4\0\1\13\11\0"+
    "\1\13\3\0\1\13\5\0\22\6\31\13\3\0\4\6"+
    "\13\13\65\6\25\13\1\6\10\13\26\6\60\0\66\13"+
    "\3\0\1\13\22\0\1\13\7\0\12\13\2\0\2\6"+
    "\12\0\1\6\20\13\3\0\1\6\10\13\2\6\2\13"+
    "\2\6\26\13\1\6\7\13\1\6\1\13\3\6\4\13"+
    "\2\6\1\0\1\13\7\0\2\6\2\0\2\6\3\0"+
    "\1\13\10\6\1\0\4\6\2\13\1\6\3\13\2\0"+
    "\2\6\12\0\4\13\7\6\2\13\4\6\3\0\1\6"+
    "\6\13\4\6\2\13\2\6\26\13\1\6\7\13\1\6"+
    "\2\13\1\6\2\13\1\6\2\13\2\6\1\0\1\6"+
    "\5\0\4\6\2\0\2\6\3\0\3\6\1\0\7\6"+
    "\4\13\1\6\1\13\7\6\14\0\3\13\1\0\13\6"+
    "\3\0\1\6\11\13\1\6\3\13\1\6\26\13\1\6"+
    "\7\13\1\6\2\13\1\6\5\13\2\6\1\0\1\13"+
    "\10\0\1\6\3\0\1\6\3\0\2\6\1\13\17\6"+
    "\2\13\2\0\2\6\12\0\1\6\1\13\7\6\1\13"+
    "\6\0\1\6\3\0\1\6\10\13\2\6\2\13\2\6"+
    "\26\13\1\6\7\13\1\6\2\13\1\6\5\13\2\6"+
    "\1\0\1\13\7\0\2\6\2\0\2\6\3\0\10\6"+
    "\2\0\4\6\2\13\1\6\3\13\2\0\2\6\12\0"+
    "\1\6\1\13\20\6\1\0\1\13\1\6\6\13\3\6"+
    "\3\13\1\6\4\13\3\6\2\13\1\6\1\13\1\6"+
    "\2\13\3\6\2\13\3\6\3\13\3\6\14\13\4\6"+
    "\5\0\3\6\3\0\1\6\4\0\2\6\1\13\6\6"+
    "\1\0\16\6\12\0\11\6\1\13\6\6\4\0\1\6"+
    "\10\13\1\6\3\13\1\6\27\13\1\6\20\13\3\6"+
    "\1\13\7\0\1\6\3\0\1\6\4\0\7\6\2\0"+
    "\1\6\3\13\5\6\2\13\2\0\2\6\12\0\20\6"+
    "\1\13\3\0\1\6\10\13\1\6\3\13\1\6\27\13"+
    "\1\6\12\13\1\6\5\13\2\6\1\0\1\13\7\0"+
    "\1\6\3\0\1\6\4\0\7\6\2\0\7\6\1\13"+
    "\1\6\2\13\2\0\2\6\12\0\1\6\2\13\15\6"+
    "\4\0\1\6\10\13\1\6\3\13\1\6\51\13\2\0"+
    "\1\13\7\0\1\6\3\0\1\6\4\0\1\13\5\6"+
    "\3\13\1\0\7\6\3\13\2\0\2\6\12\0\12\6"+
    "\6\13\2\6\2\0\1\6\22\13\3\6\30\13\1\6"+
    "\11\13\1\6\1\13\2\6\7\13\3\6\1\0\4\6"+
    "\6\0\1\6\1\0\1\6\10\0\6\6\12\0\2\6"+
    "\2\0\15\6\60\13\1\0\2\13\7\0\4\6\10\13"+
    "\10\0\1\6\12\0\47\6\2\13\1\6\1\13\2\6"+
    "\2\13\1\6\1\13\2\6\1\13\6\6\4\13\1\6"+
    "\7\13\1\6\3\13\1\6\1\13\1\6\1\13\2\6"+
    "\2\13\1\6\4\13\1\0\2\13\6\0\1\6\2\0"+
    "\1\13\2\6\5\13\1\6\1\13\1\6\6\0\2\6"+
    "\12\0\2\6\4\13\40\6\1\13\27\6\2\0\6\6"+
    "\12\0\13\6\1\0\1\6\1\0\1\6\1\0\4\6"+
    "\2\0\10\13\1\6\44\13\4\6\24\0\1\6\2\0"+
    "\5\13\13\0\1\6\44\0\11\6\1\0\71\6\53\13"+
    "\24\0\1\13\12\0\6\6\6\13\4\0\4\13\3\0"+
    "\1\13\3\0\2\13\7\0\3\13\4\0\15\13\14\0"+
    "\1\13\17\0\2\6\46\13\1\6\1\13\5\6\1\13"+
    "\2\6\53\13\1\6\115\13\1\6\4\13\2\6\7\13"+
    "\1\6\1\13\1\6\4\13\2\6\51\13\1\6\4\13"+
    "\2\6\41\13\1\6\4\13\2\6\7\13\1\6\1\13"+
    "\1\6\4\13\2\6\17\13\1\6\71\13\1\6\4\13"+
    "\2\6\103\13\2\6\3\0\40\6\20\13\20\6\126\13"+
    "\2\6\6\13\3\6\u016c\13\2\6\21\13\1\6\32\13"+
    "\5\6\113\13\3\6\13\13\7\6\15\13\1\6\4\13"+
    "\3\0\13\6\22\13\3\0\13\6\22\13\2\0\14\6"+
    "\15\13\1\6\3\13\1\6\2\0\14\6\64\13\40\0"+
    "\3\6\1\13\3\6\2\13\1\0\2\6\12\0\41\6"+
    "\4\0\1\6\12\0\6\6\130\13\10\6\5\13\2\0"+
    "\42\13\1\0\1\13\5\6\106\13\12\6\37\13\1\6"+
    "\14\0\4\6\14\0\12\6\12\0\36\13\2\6\5\13"+
    "\13\6\54\13\4\6\32\13\6\6\12\0\46\6\27\13"+
    "\5\0\4\6\65\13\12\0\1\6\35\0\2\6\13\0"+
    "\6\6\12\0\15\6\1\13\10\6\16\0\102\6\5\0"+
    "\57\13\21\0\7\13\4\6\12\0\21\6\11\0\14\6"+
    "\3\0\36\13\15\0\2\13\12\0\54\13\16\0\14\6"+
    "\44\13\24\0\10\6\12\0\3\6\3\13\12\0\44\13"+
    "\2\6\11\13\107\6\3\0\1\6\25\0\4\13\1\0"+
    "\4\13\3\0\2\13\3\0\6\6\300\13\72\0\1\6"+
    "\5\0\26\13\2\6\6\13\2\6\46\13\2\6\6\13"+
    "\2\6\10\13\1\6\1\13\1\6\1\13\1\6\1\13"+
    "\1\6\37\13\2\6\65\13\1\6\7\13\1\6\1\13"+
    "\3\6\3\13\1\6\7\13\3\6\4\13\2\6\6\13"+
    "\4\6\15\13\5\6\3\13\1\6\7\13\16\6\5\0"+
    "\30\6\2\3\5\0\20\6\2\13\23\6\1\13\13\6"+
    "\5\0\1\6\12\0\1\6\1\13\15\6\1\13\20\6"+
    "\15\13\3\6\40\13\20\6\15\0\4\6\1\0\3\6"+
    "\14\0\21\6\1\13\4\6\1\13\2\6\12\13\1\6"+
    "\1\13\3\6\5\13\6\6\1\13\1\6\1\13\1\6"+
    "\1\13\1\6\4\13\1\6\13\13\2\6\4\13\5\6"+
    "\5\13\4\6\1\13\21\6\51\13\u0177\6\57\13\1\6"+
    "\57\13\1\6\205\13\6\6\4\13\3\0\2\13\14\6"+
    "\46\13\1\6\1\13\5\6\1\13\2\6\70\13\7\6"+
    "\1\13\17\6\1\0\27\13\11\6\7\13\1\6\7\13"+
    "\1\6\7\13\1\6\7\13\1\6\7\13\1\6\7\13"+
    "\1\6\7\13\1\6\7\13\1\6\40\0\57\6\1\13"+
    "\325\6\3\13\31\6\11\13\6\0\1\6\5\13\2\6"+
    "\5\13\4\6\126\13\2\6\2\0\2\6\3\13\1\6"+
    "\132\13\1\6\4\13\5\6\52\13\2\6\136\13\21\6"+
    "\33\13\65\6\306\13\112\6\353\13\25\6\215\13\103\6"+
    "\56\13\2\6\15\13\3\6\20\13\12\0\2\13\24\6"+
    "\57\13\1\0\4\6\12\0\1\6\37\13\2\0\120\13"+
    "\2\0\45\6\11\13\2\6\147\13\2\6\44\13\1\6"+
    "\10\13\77\6\13\13\1\0\3\13\1\0\4\13\1\0"+
    "\27\13\5\0\20\6\1\13\7\6\64\13\14\6\2\0"+
    "\62\13\22\0\12\6\12\0\6\6\22\0\6\13\3\6"+
    "\1\13\1\6\1\13\2\6\12\0\34\13\10\0\2\6"+
    "\27\13\15\0\14\6\35\13\3\6\4\0\57\13\16\0"+
    "\16\6\1\13\12\0\6\6\5\13\1\0\12\13\12\0"+
    "\5\13\1\6\51\13\16\0\11\6\3\13\1\0\10\13"+
    "\2\0\2\6\12\0\6\6\27\13\3\6\1\13\3\0"+
    "\62\13\1\0\1\13\3\0\2\13\2\0\5\13\2\0"+
    "\1\13\1\0\1\13\30\6\3\13\2\6\13\13\5\0"+
    "\2\6\3\13\2\0\12\6\6\13\2\6\6\13\2\6"+
    "\6\13\11\6\7\13\1\6\7\13\1\6\53\13\1\6"+
    "\12\13\12\6\163\13\10\0\1\6\2\0\2\6\12\0"+
    "\6\6\244\13\14\6\27\13\4\6\61\13\4\6\u0100\3"+
    "\156\13\2\6\152\13\46\6\7\13\14\6\5\13\5\6"+
    "\1\13\1\0\12\13\1\6\15\13\1\6\5\13\1\6"+
    "\1\13\1\6\2\13\1\6\2\13\1\6\154\13\41\6"+
    "\153\13\22\6\100\13\2\6\66\13\50\6\15\13\3\6"+
    "\20\0\20\6\20\0\3\6\2\13\30\6\3\13\31\6"+
    "\1\13\6\6\5\13\1\6\207\13\2\6\1\0\4\6"+
    "\1\13\13\6\12\0\7\6\32\13\4\6\1\13\1\6"+
    "\32\13\13\6\131\13\3\6\6\13\2\6\6\13\2\6"+
    "\6\13\2\6\3\13\3\6\2\13\3\6\2\13\22\6"+
    "\3\0\4\6\14\13\1\6\32\13\1\6\23\13\1\6"+
    "\2\13\1\6\17\13\2\6\16\13\42\6\173\13\105\6"+
    "\65\13\210\6\1\0\202\6\35\13\3\6\61\13\17\6"+
    "\1\0\37\6\40\13\15\6\36\13\5\6\46\13\5\0"+
    "\5\6\36\13\2\6\44\13\4\6\10\13\1\6\5\13"+
    "\52\6\236\13\2\6\12\0\6\6\44\13\4\6\44\13"+
    "\4\6\50\13\10\6\64\13\234\6\67\13\11\6\26\13"+
    "\12\6\10\13\230\6\6\13\2\6\1\13\1\6\54\13"+
    "\1\6\2\13\3\6\1\13\2\6\27\13\12\6\27\13"+
    "\11\6\37\13\101\6\23\13\1\6\2\13\12\6\26\13"+
    "\12\6\32\13\106\6\70\13\6\6\2\13\100\6\1\13"+
    "\3\0\1\6\2\0\5\6\4\0\4\13\1\6\3\13"+
    "\1\6\33\13\4\6\3\0\4\6\1\0\40\6\35\13"+
    "\3\6\35\13\43\6\10\13\1\6\34\13\2\0\31\6"+
    "\66\13\12\6\26\13\12\6\23\13\15\6\22\13\156\6"+
    "\111\13\67\6\63\13\15\6\63\13\15\6\3\0\65\13"+
    "\17\0\37\6\12\0\17\6\4\0\55\13\13\0\2\6"+
    "\1\0\22\6\31\13\7\6\12\0\6\6\3\0\44\13"+
    "\16\0\1\6\12\0\20\6\43\13\1\0\2\6\1\13"+
    "\11\6\3\0\60\13\16\0\4\13\5\6\3\0\3\6"+
    "\12\0\1\13\1\6\1\13\43\6\22\13\1\6\31\13"+
    "\14\0\6\6\1\0\101\6\7\13\1\6\1\13\1\6"+
    "\4\13\1\6\17\13\1\6\12\13\7\6\57\13\14\0"+
    "\5\6\12\0\6\6\4\0\1\6\10\13\2\6\2\13"+
    "\2\6\26\13\1\6\7\13\1\6\2\13\1\6\5\13"+
    "\2\6\1\0\1\13\7\0\2\6\2\0\2\6\3\0"+
    "\2\6\1\13\6\6\1\0\5\6\5\13\2\0\2\6"+
    "\7\0\3\6\5\0\213\6\65\13\22\0\4\13\5\6"+
    "\12\0\46\6\60\13\24\0\2\13\1\6\1\13\10\6"+
    "\12\0\246\6\57\13\7\0\2\6\11\0\27\6\4\13"+
    "\2\0\42\6\60\13\21\0\3\6\1\13\13\6\12\0"+
    "\46\6\53\13\15\0\10\6\12\0\66\6\32\13\3\6"+
    "\17\0\4\6\12\0\u0166\6\100\13\12\0\25\6\2\13"+
    "\12\0\50\13\7\0\1\13\4\0\10\6\1\0\10\6"+
    "\1\13\13\0\50\13\2\6\4\13\20\0\46\6\71\13"+
    "\7\6\11\13\1\6\45\13\10\0\1\6\10\0\1\13"+
    "\17\6\12\0\30\6\36\13\2\6\26\0\1\6\16\0"+
    "\111\6\7\13\1\6\2\13\1\6\46\13\6\0\3\6"+
    "\1\0\1\6\2\0\1\6\7\0\1\13\1\0\10\6"+
    "\12\0\246\6\232\13\146\6\157\13\21\6\304\13\274\6"+
    "\57\13\321\6\107\13\271\6\71\13\7\6\37\13\1\6"+
    "\12\0\146\6\36\13\2\6\5\0\13\6\60\13\7\0"+
    "\11\6\4\13\14\6\12\0\11\6\25\13\5\6\23\13"+
    "\160\6\105\13\13\6\1\13\56\0\20\6\4\0\15\13"+
    "\100\6\2\13\36\6\355\13\23\6\363\13\15\6\37\13"+
    "\121\6\u018c\13\4\6\153\13\5\6\15\13\3\6\11\13"+
    "\7\6\12\13\3\6\2\0\1\6\4\0\301\6\5\0"+
    "\3\6\26\0\2\6\7\0\36\6\4\0\224\6\3\0"+
    "\273\6\125\13\1\6\107\13\1\6\2\13\2\6\1\13"+
    "\2\6\2\13\2\6\4\13\1\6\14\13\1\6\1\13"+
    "\1\6\7\13\1\6\101\13\1\6\4\13\2\6\10\13"+
    "\1\6\7\13\1\6\34\13\1\6\4\13\1\6\5\13"+
    "\1\6\1\13\3\6\7\13\1\6\u0154\13\2\6\31\13"+
    "\1\6\31\13\1\6\37\13\1\6\31\13\1\6\37\13"+
    "\1\6\31\13\1\6\37\13\1\6\31\13\1\6\37\13"+
    "\1\6\31\13\1\6\10\13\2\6\151\0\4\6\62\0"+
    "\10\6\1\0\16\6\1\0\26\6\5\0\1\6\17\0"+
    "\120\6\7\0\1\6\21\0\2\6\7\0\1\6\2\0"+
    "\1\6\5\0\325\6\305\13\13\6\7\0\51\6\104\13"+
    "\7\0\5\6\12\0\246\6\4\13\1\6\33\13\1\6"+
    "\2\13\1\6\1\13\2\6\1\13\1\6\12\13\1\6"+
    "\4\13\1\6\1\13\1\6\1\13\6\6\1\13\4\6"+
    "\1\13\1\6\1\13\1\6\1\13\1\6\3\13\1\6"+
    "\2\13\1\6\1\13\2\6\1\13\1\6\1\13\1\6"+
    "\1\13\1\6\1\13\1\6\1\13\1\6\2\13\1\6"+
    "\1\13\2\6\4\13\1\6\7\13\1\6\4\13\1\6"+
    "\4\13\1\6\1\13\1\6\12\13\1\6\21\13\5\6"+
    "\3\13\1\6\5\13\1\6\21\13\104\6\327\13\51\6"+
    "\65\13\13\6\336\13\2\6\u0182\13\16\6\u0131\13\37\6"+
    "\36\13\343\6\1\0\36\6\140\0\200\6\360\0\20\6";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[27904];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\1\3\1\4\1\3\1\4\1\5"+
    "\1\6\1\7\1\10\2\1\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\2\20\1\21\1\22\1\23\1\24"+
    "\21\7\1\25\1\26\1\27\1\30\1\1\1\31\1\32"+
    "\1\33\1\32\1\34\1\35\1\36\1\37\1\40\2\0"+
    "\1\41\1\0\1\42\1\0\1\43\1\44\2\0\1\45"+
    "\1\46\1\47\3\0\1\50\1\51\1\52\1\53\6\7"+
    "\1\54\3\7\1\55\3\7\1\56\2\7\1\57\4\7"+
    "\1\60\1\7\1\61\6\7\1\62\1\0\1\63\1\64"+
    "\1\35\1\0\1\65\1\66\1\67\2\70\2\0\2\53"+
    "\11\7\1\71\4\7\1\72\4\7\1\73\2\7\1\74"+
    "\5\7\1\75\3\7\1\76\1\7\1\77\3\7\1\100"+
    "\1\7\1\0\1\70\1\0\1\53\5\7\1\101\12\7"+
    "\1\102\4\7\1\103\7\7\1\104\1\105\2\7\1\106"+
    "\1\7\1\70\10\7\1\107\3\7\1\110\1\111\5\7"+
    "\1\112\1\113\4\7\1\114\3\7\1\70\3\7\1\115"+
    "\4\7\1\116\7\7\1\117\4\7\1\120\1\7\1\70"+
    "\1\121\1\7\1\122\2\7\1\123\1\7\1\124\1\7"+
    "\1\125\1\7\1\126\1\7\1\127\2\7\1\130\2\7"+
    "\1\70\1\7\1\131\2\7\1\132\1\133\1\134\5\7"+
    "\1\135\1\7\1\136\1\7\1\137\1\140\1\7\1\141"+
    "\1\142";

  private static int [] zzUnpackAction() {
    int [] result = new int[300];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\113\0\226\0\341\0\341\0\341\0\341\0\u012c"+
    "\0\u0177\0\u01c2\0\341\0\u020d\0\341\0\u0258\0\u02a3\0\341"+
    "\0\341\0\341\0\u02ee\0\341\0\u0339\0\341\0\u0384\0\u03cf"+
    "\0\341\0\u041a\0\u0465\0\u04b0\0\u04fb\0\u0546\0\u0591\0\u05dc"+
    "\0\u0627\0\u0672\0\u06bd\0\u0708\0\u0753\0\u079e\0\u07e9\0\u0834"+
    "\0\u087f\0\u08ca\0\u0915\0\u0960\0\u09ab\0\341\0\341\0\341"+
    "\0\341\0\u09f6\0\341\0\341\0\341\0\u0a41\0\u0a8c\0\u0a8c"+
    "\0\341\0\341\0\341\0\u0ad7\0\u0b22\0\341\0\u0b6d\0\341"+
    "\0\u0bb8\0\341\0\341\0\u0c03\0\u0c4e\0\341\0\341\0\341"+
    "\0\u0c99\0\u0384\0\u0ce4\0\341\0\341\0\341\0\u0d2f\0\u0d7a"+
    "\0\u0dc5\0\u0e10\0\u0e5b\0\u0ea6\0\u0ef1\0\u0f3c\0\u0f87\0\u0fd2"+
    "\0\u101d\0\u1068\0\u10b3\0\u10fe\0\u1149\0\u1194\0\u11df\0\u122a"+
    "\0\u1275\0\u12c0\0\u130b\0\u1356\0\u13a1\0\u13ec\0\u1437\0\u1482"+
    "\0\u14cd\0\u1518\0\u1563\0\u15ae\0\u15f9\0\u1644\0\341\0\u168f"+
    "\0\341\0\341\0\341\0\u16da\0\341\0\341\0\341\0\u1725"+
    "\0\u1770\0\u17bb\0\u1806\0\341\0\u1851\0\u189c\0\u18e7\0\u1932"+
    "\0\u197d\0\u19c8\0\u1a13\0\u1a5e\0\u1aa9\0\u1af4\0\341\0\u1b3f"+
    "\0\u1b8a\0\u1bd5\0\u1c20\0\341\0\u1c6b\0\u1cb6\0\u1d01\0\u1d4c"+
    "\0\341\0\u1d97\0\u1de2\0\341\0\u1e2d\0\u1e78\0\u1ec3\0\u1f0e"+
    "\0\u1f59\0\341\0\u1fa4\0\u1fef\0\u203a\0\341\0\u2085\0\u20d0"+
    "\0\u211b\0\u2166\0\u21b1\0\u020d\0\u21fc\0\u2247\0\u2292\0\u22dd"+
    "\0\u17bb\0\u2328\0\u2373\0\u23be\0\u2409\0\u2454\0\u020d\0\u249f"+
    "\0\u24ea\0\u2535\0\u2580\0\u25cb\0\u2616\0\u2661\0\u26ac\0\u26f7"+
    "\0\u2742\0\u020d\0\u278d\0\u27d8\0\u2823\0\u286e\0\u020d\0\u28b9"+
    "\0\u2904\0\u294f\0\u299a\0\u29e5\0\u2a30\0\u2a7b\0\u020d\0\341"+
    "\0\u2ac6\0\u2b11\0\u020d\0\u2b5c\0\u2ba7\0\u2bf2\0\u2c3d\0\u2c88"+
    "\0\u2cd3\0\u2d1e\0\u2d69\0\u2db4\0\u2dff\0\u020d\0\u2e4a\0\u2e95"+
    "\0\u2ee0\0\u020d\0\u020d\0\u2f2b\0\u2f76\0\u2fc1\0\u300c\0\u3057"+
    "\0\u020d\0\u020d\0\u30a2\0\u30ed\0\u3138\0\u3183\0\u020d\0\u31ce"+
    "\0\u3219\0\u3264\0\u32af\0\u32fa\0\u3345\0\u3390\0\u020d\0\u33db"+
    "\0\u3426\0\u3471\0\u34bc\0\u020d\0\u3507\0\u3552\0\u359d\0\u35e8"+
    "\0\u3633\0\u367e\0\u36c9\0\u020d\0\u3714\0\u375f\0\u37aa\0\u37f5"+
    "\0\u020d\0\u3840\0\u388b\0\u020d\0\u38d6\0\u020d\0\u3921\0\u396c"+
    "\0\u020d\0\u39b7\0\u020d\0\u3a02\0\u020d\0\u3a4d\0\u020d\0\u3a98"+
    "\0\u020d\0\u3ae3\0\u3b2e\0\u020d\0\u3b79\0\u3bc4\0\341\0\u3c0f"+
    "\0\u020d\0\u3c5a\0\u3ca5\0\u020d\0\u020d\0\u020d\0\u3cf0\0\u3d3b"+
    "\0\u3d86\0\u3dd1\0\u3e1c\0\u020d\0\u3e67\0\u020d\0\u3eb2\0\u020d"+
    "\0\u020d\0\u3efd\0\u020d\0\u020d";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[300];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\6\1\0\1\7\1\10\1\4\1\11"+
    "\1\12\1\13\1\4\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\4\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\1\35\1\36\1\37\1\40\1\41\1\42\1\14"+
    "\1\43\1\44\1\14\1\46\1\47\1\14\1\50\1\51"+
    "\1\52\1\53\1\54\4\14\1\61\1\62\1\63\1\0"+
    "\1\64\1\65\4\0\1\64\1\66\102\64\1\0\1\67"+
    "\1\70\1\71\2\67\1\72\3\67\1\73\1\74\100\67"+
    "\115\0\1\6\117\0\1\75\113\0\1\76\4\0\1\77"+
    "\15\0\1\100\54\0\1\101\2\0\1\14\12\0\1\14"+
    "\13\0\2\14\4\0\21\14\3\0\26\14\3\0\1\14"+
    "\15\0\1\102\72\0\1\103\2\0\12\104\1\105\100\104"+
    "\22\0\1\106\10\0\1\107\103\0\1\110\113\0\1\111"+
    "\1\0\2\112\107\0\1\111\1\0\2\30\106\0\1\113"+
    "\6\0\1\114\112\0\1\115\112\0\1\116\1\117\56\0"+
    "\1\14\12\0\1\14\13\0\2\14\4\0\21\14\3\0"+
    "\17\14\1\120\1\121\5\14\3\0\2\14\12\0\1\14"+
    "\13\0\2\14\4\0\21\14\3\0\15\14\1\122\10\14"+
    "\3\0\2\14\12\0\1\14\13\0\2\14\4\0\21\14"+
    "\3\0\1\123\14\14\1\124\10\14\3\0\2\14\12\0"+
    "\1\14\13\0\2\14\4\0\21\14\3\0\4\14\1\125"+
    "\10\14\1\126\10\14\3\0\2\14\12\0\1\14\13\0"+
    "\2\14\4\0\21\14\3\0\14\14\1\127\3\14\1\130"+
    "\3\14\1\131\1\14\3\0\2\14\12\0\1\14\13\0"+
    "\2\14\4\0\21\14\3\0\1\132\25\14\3\0\2\14"+
    "\12\0\1\14\13\0\2\14\4\0\21\14\3\0\1\133"+
    "\25\14\3\0\2\14\12\0\1\14\13\0\2\14\4\0"+
    "\21\14\3\0\13\14\1\134\12\14\3\0\2\14\12\0"+
    "\1\14\13\0\2\14\4\0\21\14\3\0\4\14\1\135"+
    "\21\14\3\0\2\14\12\0\1\14\13\0\2\14\4\0"+
    "\21\14\3\0\1\136\14\14\1\137\10\14\3\0\2\14"+
    "\12\0\1\14\13\0\2\14\4\0\21\14\3\0\4\14"+
    "\1\140\3\14\1\141\15\14\3\0\2\14\12\0\1\14"+
    "\13\0\2\14\4\0\21\14\3\0\17\14\1\142\6\14"+
    "\3\0\2\14\12\0\1\14\13\0\2\14\4\0\21\14"+
    "\3\0\1\143\7\14\1\144\6\14\1\145\6\14\3\0"+
    "\2\14\12\0\1\14\13\0\2\14\4\0\21\14\3\0"+
    "\4\14\1\146\21\14\3\0\2\14\12\0\1\14\13\0"+
    "\2\14\4\0\21\14\3\0\1\147\7\14\1\150\4\14"+
    "\1\151\4\14\1\152\1\153\2\14\3\0\2\14\12\0"+
    "\1\14\13\0\2\14\4\0\21\14\3\0\17\14\1\154"+
    "\6\14\3\0\2\14\12\0\1\14\13\0\2\14\4\0"+
    "\21\14\3\0\1\155\3\14\1\156\21\14\3\0\1\14"+
    "\110\0\1\157\11\0\1\160\103\0\2\67\1\0\2\67"+
    "\1\0\3\67\2\0\100\67\11\0\1\161\1\162\62\0"+
    "\1\71\4\0\1\163\17\0\1\164\120\0\1\165\205\0"+
    "\1\166\20\0\1\167\106\0\1\104\3\0\1\167\56\0"+
    "\1\104\4\0\1\104\37\0\1\170\1\171\62\0\24\172"+
    "\1\173\66\172\2\117\1\174\2\117\1\175\105\117\1\14"+
    "\12\0\1\14\13\0\2\14\4\0\21\14\3\0\17\14"+
    "\1\176\6\14\3\0\2\14\12\0\1\14\13\0\2\14"+
    "\4\0\21\14\3\0\2\14\1\177\23\14\3\0\2\14"+
    "\12\0\1\14\13\0\2\14\4\0\21\14\3\0\15\14"+
    "\1\200\10\14\3\0\2\14\12\0\1\14\13\0\2\14"+
    "\4\0\21\14\3\0\3\14\1\201\13\14\1\202\1\203"+
    "\5\14\3\0\2\14\12\0\1\14\13\0\2\14\4\0"+
    "\21\14\3\0\14\14\1\204\11\14\3\0\2\14\12\0"+
    "\1\14\13\0\2\14\4\0\21\14\3\0\5\14\1\205"+
    "\12\14\1\206\5\14\3\0\2\14\11\0\1\207\1\14"+
    "\13\0\2\14\4\0\21\14\3\0\1\14\1\210\24\14"+
    "\3\0\2\14\12\0\1\14\13\0\2\14\4\0\21\14"+
    "\3\0\21\14\1\211\4\14\3\0\2\14\12\0\1\14"+
    "\13\0\2\14\4\0\21\14\3\0\16\14\1\212\7\14"+
    "\3\0\2\14\12\0\1\14\13\0\2\14\4\0\21\14"+
    "\3\0\21\14\1\213\4\14\3\0\2\14\11\0\1\214"+
    "\1\14\13\0\2\14\4\0\21\14\3\0\12\14\1\215"+
    "\13\14\3\0\2\14\12\0\1\14\13\0\2\14\4\0"+
    "\21\14\3\0\2\14\1\216\23\14\3\0\2\14\12\0"+
    "\1\14\13\0\2\14\4\0\21\14\3\0\16\14\1\217"+
    "\7\14\3\0\2\14\12\0\1\14\13\0\2\14\4\0"+
    "\21\14\3\0\4\14\1\220\21\14\3\0\2\14\11\0"+
    "\1\221\1\14\13\0\2\14\4\0\21\14\3\0\26\14"+
    "\3\0\2\14\12\0\1\14\13\0\2\14\4\0\21\14"+
    "\3\0\14\14\1\222\11\14\3\0\2\14\12\0\1\14"+
    "\13\0\2\14\4\0\21\14\3\0\14\14\1\223\11\14"+
    "\3\0\2\14\11\0\1\224\1\14\13\0\2\14\4\0"+
    "\21\14\3\0\4\14\1\225\21\14\3\0\2\14\12\0"+
    "\1\14\13\0\2\14\4\0\21\14\3\0\3\14\1\226"+
    "\22\14\3\0\2\14\12\0\1\14\13\0\2\14\4\0"+
    "\21\14\3\0\17\14\1\227\6\14\3\0\2\14\12\0"+
    "\1\14\13\0\2\14\4\0\21\14\3\0\20\14\1\230"+
    "\5\14\3\0\2\14\12\0\1\14\13\0\2\14\4\0"+
    "\21\14\3\0\10\14\1\231\15\14\3\0\2\14\11\0"+
    "\1\232\1\14\13\0\2\14\4\0\21\14\3\0\16\14"+
    "\1\233\2\14\1\234\4\14\3\0\2\14\12\0\1\14"+
    "\13\0\2\14\4\0\21\14\3\0\12\14\1\235\13\14"+
    "\3\0\2\14\11\0\1\236\1\14\13\0\2\14\4\0"+
    "\21\14\3\0\14\14\1\237\11\14\3\0\2\14\12\0"+
    "\1\14\13\0\2\14\4\0\21\14\3\0\12\14\1\240"+
    "\13\14\3\0\2\14\12\0\1\14\13\0\2\14\4\0"+
    "\21\14\3\0\13\14\1\241\12\14\3\0\2\14\12\0"+
    "\1\14\13\0\2\14\4\0\21\14\3\0\10\14\1\242"+
    "\15\14\3\0\2\14\12\0\1\14\13\0\2\14\4\0"+
    "\21\14\3\0\22\14\1\243\3\14\3\0\2\14\12\0"+
    "\1\14\13\0\2\14\4\0\21\14\3\0\17\14\1\244"+
    "\6\14\3\0\2\14\12\0\1\14\13\0\2\14\4\0"+
    "\21\14\3\0\17\14\1\245\6\14\3\0\1\14\7\0"+
    "\1\246\112\0\1\5\132\0\1\247\1\171\111\0\2\171"+
    "\62\0\24\172\1\250\112\172\1\250\7\172\1\251\56\172"+
    "\2\0\1\174\110\0\1\14\12\0\1\14\13\0\2\14"+
    "\4\0\21\14\3\0\4\14\1\252\21\14\3\0\2\14"+
    "\12\0\1\14\13\0\2\14\4\0\21\14\3\0\4\14"+
    "\1\253\21\14\3\0\2\14\12\0\1\14\13\0\2\14"+
    "\4\0\21\14\3\0\12\14\1\254\13\14\3\0\2\14"+
    "\12\0\1\14\13\0\2\14\4\0\21\14\3\0\4\14"+
    "\1\255\21\14\3\0\2\14\12\0\1\14\13\0\2\14"+
    "\4\0\21\14\3\0\1\256\25\14\3\0\2\14\12\0"+
    "\1\14\13\0\2\14\4\0\21\14\3\0\15\14\1\257"+
    "\10\14\3\0\2\14\12\0\1\14\13\0\2\14\4\0"+
    "\21\14\3\0\21\14\1\260\4\14\3\0\2\14\12\0"+
    "\1\14\13\0\2\14\4\0\21\14\3\0\1\261\25\14"+
    "\3\0\2\14\12\0\1\14\13\0\2\14\4\0\21\14"+
    "\3\0\2\14\1\262\23\14\3\0\2\14\12\0\1\14"+
    "\13\0\2\14\4\0\21\14\3\0\12\14\1\263\13\14"+
    "\3\0\2\14\12\0\1\14\13\0\2\14\4\0\21\14"+
    "\3\0\4\14\1\264\21\14\3\0\2\14\12\0\1\14"+
    "\13\0\2\14\4\0\21\14\3\0\4\14\1\265\21\14"+
    "\3\0\2\14\12\0\1\14\13\0\2\14\4\0\21\14"+
    "\3\0\10\14\1\266\15\14\3\0\2\14\12\0\1\14"+
    "\13\0\2\14\4\0\21\14\3\0\20\14\1\267\5\14"+
    "\3\0\2\14\12\0\1\14\13\0\2\14\4\0\21\14"+
    "\3\0\4\14\1\270\21\14\3\0\2\14\12\0\1\14"+
    "\13\0\2\14\4\0\21\14\3\0\1\271\25\14\3\0"+
    "\2\14\12\0\1\14\13\0\2\14\4\0\21\14\3\0"+
    "\16\14\1\272\7\14\3\0\2\14\12\0\1\14\13\0"+
    "\2\14\4\0\21\14\3\0\6\14\1\273\17\14\3\0"+
    "\2\14\12\0\1\14\13\0\2\14\4\0\21\14\3\0"+
    "\20\14\1\274\5\14\3\0\2\14\12\0\1\14\13\0"+
    "\2\14\4\0\21\14\3\0\14\14\1\275\11\14\3\0"+
    "\2\14\12\0\1\14\13\0\2\14\4\0\21\14\3\0"+
    "\4\14\1\276\21\14\3\0\2\14\12\0\1\14\13\0"+
    "\2\14\4\0\21\14\3\0\1\277\3\14\1\300\21\14"+
    "\3\0\2\14\12\0\1\14\13\0\2\14\4\0\21\14"+
    "\3\0\21\14\1\301\4\14\3\0\2\14\12\0\1\14"+
    "\13\0\2\14\4\0\21\14\3\0\13\14\1\302\1\303"+
    "\11\14\3\0\2\14\12\0\1\14\13\0\2\14\4\0"+
    "\21\14\3\0\17\14\1\304\6\14\3\0\2\14\12\0"+
    "\1\14\13\0\2\14\4\0\21\14\3\0\15\14\1\305"+
    "\10\14\3\0\2\14\12\0\1\14\13\0\2\14\4\0"+
    "\21\14\3\0\10\14\1\306\15\14\3\0\2\14\12\0"+
    "\1\14\13\0\2\14\4\0\21\14\3\0\15\14\1\307"+
    "\10\14\3\0\2\14\11\0\1\310\1\14\13\0\2\14"+
    "\4\0\21\14\3\0\26\14\3\0\2\14\12\0\1\14"+
    "\13\0\2\14\4\0\21\14\3\0\1\311\25\14\3\0"+
    "\2\14\12\0\1\14\13\0\2\14\4\0\21\14\3\0"+
    "\21\14\1\312\4\14\3\0\2\14\12\0\1\14\13\0"+
    "\2\14\4\0\21\14\3\0\4\14\1\313\21\14\3\0"+
    "\2\14\12\0\1\14\13\0\2\14\4\0\21\14\3\0"+
    "\3\14\1\314\22\14\3\0\1\14\7\0\1\65\132\0"+
    "\1\315\1\171\62\0\24\172\1\250\7\172\1\174\56\172"+
    "\1\14\12\0\1\14\13\0\2\14\4\0\21\14\3\0"+
    "\6\14\1\316\17\14\3\0\2\14\12\0\1\14\13\0"+
    "\2\14\4\0\21\14\3\0\14\14\1\317\11\14\3\0"+
    "\2\14\12\0\1\14\13\0\2\14\4\0\21\14\3\0"+
    "\4\14\1\320\21\14\3\0\2\14\12\0\1\14\13\0"+
    "\2\14\4\0\21\14\3\0\14\14\1\321\11\14\3\0"+
    "\2\14\12\0\1\14\13\0\2\14\4\0\21\14\3\0"+
    "\2\14\1\322\23\14\3\0\2\14\12\0\1\14\13\0"+
    "\2\14\4\0\21\14\3\0\10\14\1\323\15\14\3\0"+
    "\2\14\12\0\1\14\13\0\2\14\4\0\21\14\3\0"+
    "\22\14\1\324\3\14\3\0\2\14\12\0\1\14\13\0"+
    "\2\14\4\0\21\14\3\0\4\14\1\325\21\14\3\0"+
    "\2\14\12\0\1\14\13\0\2\14\4\0\21\14\3\0"+
    "\4\14\1\326\21\14\3\0\2\14\12\0\1\14\13\0"+
    "\2\14\4\0\21\14\3\0\17\14\1\327\6\14\3\0"+
    "\2\14\12\0\1\14\13\0\2\14\4\0\21\14\3\0"+
    "\17\14\1\330\6\14\3\0\2\14\12\0\1\14\13\0"+
    "\2\14\4\0\21\14\3\0\4\14\1\331\21\14\3\0"+
    "\2\14\12\0\1\14\13\0\2\14\4\0\21\14\3\0"+
    "\4\14\1\332\10\14\1\332\10\14\3\0\2\14\12\0"+
    "\1\14\13\0\2\14\4\0\21\14\3\0\17\14\1\333"+
    "\6\14\3\0\2\14\12\0\1\14\13\0\2\14\4\0"+
    "\21\14\3\0\17\14\1\334\6\14\3\0\2\14\12\0"+
    "\1\14\13\0\2\14\4\0\21\14\3\0\10\14\1\335"+
    "\15\14\3\0\2\14\12\0\1\14\13\0\2\14\4\0"+
    "\21\14\3\0\1\336\25\14\3\0\2\14\12\0\1\14"+
    "\13\0\2\14\4\0\21\14\3\0\21\14\1\337\4\14"+
    "\3\0\2\14\12\0\1\14\13\0\2\14\4\0\21\14"+
    "\3\0\14\14\1\340\11\14\3\0\2\14\12\0\1\14"+
    "\13\0\2\14\4\0\21\14\3\0\20\14\1\341\5\14"+
    "\3\0\2\14\12\0\1\14\13\0\2\14\4\0\21\14"+
    "\3\0\1\342\25\14\3\0\2\14\12\0\1\14\13\0"+
    "\2\14\4\0\21\14\3\0\15\14\1\343\10\14\3\0"+
    "\2\14\12\0\1\14\13\0\2\14\4\0\21\14\3\0"+
    "\2\14\1\344\23\14\3\0\2\14\12\0\1\14\13\0"+
    "\2\14\4\0\21\14\3\0\15\14\1\345\10\14\3\0"+
    "\2\14\12\0\1\14\13\0\2\14\4\0\21\14\3\0"+
    "\17\14\1\346\6\14\3\0\2\14\12\0\1\14\13\0"+
    "\2\14\4\0\21\14\3\0\17\14\1\347\6\14\3\0"+
    "\2\14\12\0\1\14\13\0\2\14\4\0\21\14\3\0"+
    "\17\14\1\350\6\14\3\0\2\14\12\0\1\14\13\0"+
    "\2\14\4\0\21\14\3\0\2\14\1\351\23\14\3\0"+
    "\2\14\12\0\1\14\13\0\2\14\4\0\21\14\3\0"+
    "\1\352\25\14\3\0\1\14\27\0\1\353\1\171\62\0"+
    "\1\14\12\0\1\14\13\0\2\14\4\0\21\14\3\0"+
    "\12\14\1\354\13\14\3\0\2\14\12\0\1\14\13\0"+
    "\2\14\4\0\21\14\3\0\3\14\1\355\22\14\3\0"+
    "\2\14\12\0\1\14\13\0\2\14\4\0\21\14\3\0"+
    "\1\356\25\14\3\0\2\14\12\0\1\14\13\0\2\14"+
    "\4\0\21\14\3\0\1\357\25\14\3\0\2\14\12\0"+
    "\1\14\13\0\2\14\4\0\21\14\3\0\21\14\1\360"+
    "\4\14\3\0\2\14\12\0\1\14\13\0\2\14\4\0"+
    "\21\14\3\0\14\14\1\361\11\14\3\0\2\14\12\0"+
    "\1\14\13\0\2\14\4\0\21\14\3\0\12\14\1\362"+
    "\13\14\3\0\2\14\12\0\1\14\13\0\2\14\4\0"+
    "\21\14\3\0\14\14\1\363\11\14\3\0\2\14\12\0"+
    "\1\14\13\0\2\14\4\0\21\14\3\0\15\14\1\364"+
    "\10\14\3\0\2\14\12\0\1\14\13\0\2\14\4\0"+
    "\21\14\3\0\1\365\25\14\3\0\2\14\12\0\1\14"+
    "\13\0\2\14\4\0\21\14\3\0\14\14\1\366\11\14"+
    "\3\0\2\14\12\0\1\14\13\0\2\14\4\0\21\14"+
    "\3\0\4\14\1\367\21\14\3\0\2\14\12\0\1\14"+
    "\13\0\2\14\4\0\21\14\3\0\21\14\1\370\4\14"+
    "\3\0\2\14\12\0\1\14\13\0\2\14\4\0\21\14"+
    "\3\0\11\14\1\371\14\14\3\0\2\14\12\0\1\14"+
    "\13\0\2\14\4\0\21\14\3\0\17\14\1\372\6\14"+
    "\3\0\2\14\12\0\1\14\13\0\2\14\4\0\21\14"+
    "\3\0\1\373\25\14\3\0\2\14\12\0\1\14\13\0"+
    "\2\14\4\0\21\14\3\0\20\14\1\374\5\14\3\0"+
    "\2\14\12\0\1\14\13\0\2\14\4\0\21\14\3\0"+
    "\10\14\1\375\15\14\3\0\2\14\12\0\1\14\13\0"+
    "\2\14\4\0\21\14\3\0\3\14\1\376\22\14\3\0"+
    "\2\14\12\0\1\14\13\0\2\14\4\0\21\14\3\0"+
    "\14\14\1\377\11\14\3\0\2\14\12\0\1\14\13\0"+
    "\2\14\4\0\21\14\3\0\10\14\1\u0100\15\14\3\0"+
    "\2\14\12\0\1\14\13\0\2\14\4\0\21\14\3\0"+
    "\7\14\1\u0101\16\14\3\0\2\14\12\0\1\14\13\0"+
    "\2\14\4\0\21\14\3\0\3\14\1\u0102\22\14\3\0"+
    "\1\14\27\0\1\u0103\1\171\62\0\1\14\12\0\1\14"+
    "\13\0\2\14\4\0\21\14\3\0\15\14\1\u0104\10\14"+
    "\3\0\2\14\12\0\1\14\13\0\2\14\4\0\21\14"+
    "\3\0\4\14\1\u0105\21\14\3\0\2\14\12\0\1\14"+
    "\13\0\2\14\4\0\21\14\3\0\14\14\1\u0106\11\14"+
    "\3\0\2\14\12\0\1\14\13\0\2\14\4\0\21\14"+
    "\3\0\4\14\1\u0107\21\14\3\0\2\14\12\0\1\14"+
    "\13\0\2\14\4\0\21\14\3\0\22\14\1\u0108\3\14"+
    "\3\0\2\14\12\0\1\14\13\0\2\14\4\0\21\14"+
    "\3\0\21\14\1\u0109\4\14\3\0\2\14\12\0\1\14"+
    "\13\0\2\14\4\0\21\14\3\0\3\14\1\u010a\22\14"+
    "\3\0\2\14\12\0\1\14\13\0\2\14\4\0\21\14"+
    "\3\0\17\14\1\u010b\6\14\3\0\2\14\12\0\1\14"+
    "\13\0\2\14\4\0\21\14\3\0\3\14\1\u010c\22\14"+
    "\3\0\2\14\12\0\1\14\13\0\2\14\4\0\21\14"+
    "\3\0\20\14\1\u010d\5\14\3\0\2\14\12\0\1\14"+
    "\13\0\2\14\4\0\21\14\3\0\22\14\1\u010e\3\14"+
    "\3\0\2\14\12\0\1\14\13\0\2\14\4\0\21\14"+
    "\3\0\4\14\1\u010f\21\14\3\0\2\14\12\0\1\14"+
    "\13\0\2\14\4\0\21\14\3\0\1\u0110\25\14\3\0"+
    "\2\14\12\0\1\14\13\0\2\14\4\0\21\14\3\0"+
    "\17\14\1\u0111\6\14\3\0\2\14\12\0\1\14\13\0"+
    "\2\14\4\0\21\14\3\0\16\14\1\u0112\7\14\3\0"+
    "\2\14\12\0\1\14\13\0\2\14\4\0\21\14\3\0"+
    "\22\14\1\u0113\3\14\3\0\2\14\12\0\1\14\13\0"+
    "\2\14\4\0\21\14\3\0\1\u0114\25\14\3\0\2\14"+
    "\12\0\1\14\13\0\2\14\4\0\21\14\3\0\25\14"+
    "\1\u0115\3\0\2\14\12\0\1\14\13\0\2\14\4\0"+
    "\21\14\3\0\4\14\1\u0116\21\14\3\0\1\14\27\0"+
    "\1\u0117\1\171\62\0\1\14\12\0\1\14\13\0\2\14"+
    "\4\0\21\14\3\0\14\14\1\u0118\11\14\3\0\2\14"+
    "\12\0\1\14\13\0\2\14\4\0\21\14\3\0\17\14"+
    "\1\u0119\6\14\3\0\2\14\12\0\1\14\13\0\2\14"+
    "\4\0\21\14\3\0\1\u011a\25\14\3\0\2\14\12\0"+
    "\1\14\13\0\2\14\4\0\21\14\3\0\4\14\1\u011b"+
    "\21\14\3\0\2\14\12\0\1\14\13\0\2\14\4\0"+
    "\21\14\3\0\4\14\1\u011c\21\14\3\0\2\14\12\0"+
    "\1\14\13\0\2\14\4\0\21\14\3\0\3\14\1\u011d"+
    "\22\14\3\0\2\14\12\0\1\14\13\0\2\14\4\0"+
    "\21\14\3\0\20\14\1\u011e\5\14\3\0\2\14\12\0"+
    "\1\14\13\0\2\14\4\0\21\14\3\0\1\u011f\25\14"+
    "\3\0\2\14\12\0\1\14\13\0\2\14\4\0\21\14"+
    "\3\0\2\14\1\u0120\23\14\3\0\2\14\12\0\1\14"+
    "\13\0\2\14\4\0\21\14\3\0\1\u0121\25\14\3\0"+
    "\2\14\12\0\1\14\13\0\2\14\4\0\21\14\3\0"+
    "\17\14\1\u0122\6\14\3\0\2\14\12\0\1\14\13\0"+
    "\2\14\4\0\21\14\3\0\21\14\1\u0123\4\14\3\0"+
    "\2\14\12\0\1\14\13\0\2\14\4\0\21\14\3\0"+
    "\17\14\1\u0124\6\14\3\0\2\14\12\0\1\14\13\0"+
    "\2\14\4\0\21\14\3\0\14\14\1\u0125\11\14\3\0"+
    "\2\14\12\0\1\14\13\0\2\14\4\0\21\14\3\0"+
    "\12\14\1\u0126\13\14\3\0\2\14\12\0\1\14\13\0"+
    "\2\14\4\0\21\14\3\0\10\14\1\u0127\15\14\3\0"+
    "\2\14\12\0\1\14\13\0\2\14\4\0\21\14\3\0"+
    "\17\14\1\u0128\6\14\3\0\2\14\12\0\1\14\13\0"+
    "\2\14\4\0\21\14\3\0\15\14\1\313\10\14\3\0"+
    "\2\14\12\0\1\14\13\0\2\14\4\0\21\14\3\0"+
    "\4\14\1\u0129\21\14\3\0\2\14\12\0\1\14\13\0"+
    "\2\14\4\0\21\14\3\0\21\14\1\u012a\4\14\3\0"+
    "\2\14\12\0\1\14\13\0\2\14\4\0\21\14\3\0"+
    "\17\14\1\u012b\6\14\3\0\2\14\12\0\1\14\13\0"+
    "\2\14\4\0\21\14\3\0\4\14\1\u012c\21\14\3\0"+
    "\1\14";

  private static int [] zzUnpackTrans() {
    int [] result = new int[16200];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\4\11\3\1\1\11\1\1\1\11\2\1\3\11"+
    "\1\1\1\11\1\1\1\11\2\1\1\11\24\1\4\11"+
    "\1\1\3\11\3\1\3\11\2\0\1\11\1\0\1\11"+
    "\1\0\2\11\2\0\3\11\3\0\3\11\40\1\1\11"+
    "\1\0\3\11\1\0\3\11\2\1\2\0\1\11\12\1"+
    "\1\11\4\1\1\11\4\1\1\11\2\1\1\11\5\1"+
    "\1\11\3\1\1\11\7\1\1\0\1\1\1\0\37\1"+
    "\1\11\116\1\1\11\25\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[300];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    LinkedList<GlobalError> errors;
    int tabNumber; /* numero de tabulaciones */
    int stackValue; /* valor temporal en el stack */
    int desDentVal; /* numero de desidentaciones */
    boolean flag = false; 
    StringBuilder string = new StringBuilder();
    Stack<Integer> stack = new Stack<Integer>();

    public MusicLexer(java.io.Reader in, LinkedList<GlobalError> errors) {
        this.zzReader = in;
        this.errors = errors;
    }
    
    private Symbol verifyStack() {
        if(!stack.isEmpty() && yycolumn==0){
            yypushback(yytext().length()); 
            stack.pop(); 
            print_token("dedent"); 
            return symbol(sym.DEDENT);
        }    
        return null;
    }
    
    private Symbol symbol(int type) {
        return new Symbol(type, yyline+1, yycolumn+1);
    }
    
    private Symbol symbol(int type, Object value) {
        return new Symbol(type, yyline+1, yycolumn+1, value);
    }


    private void print_token(String token) {
        System.out.println(token);
    }

    private void add_error(String value, int line, int column, String description) {
        GlobalError error = new GlobalError(line, column, "lexico", value, description);
        errors.add(error);
    }



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public MusicLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
            switch (zzLexicalState) {
            case YYINITIAL: {
              if(stack.isEmpty()){
                                                        return new Symbol(sym.EOF);
                                                    } else{
                                                        stack.pop();
                                                        print_token("dedent");
                                                        return symbol(sym.DEDENT);
                                                    }
            }  // fall though
            case 301: break;
            default:
          { return new java_cup.runtime.Symbol(sym.EOF); }
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { print_token("Error: " + yytext()); add_error(yytext(), yyline+1, yycolumn+1, "simbolo " + yytext() + " no esperado.");
            }
            // fall through
          case 99: break;
          case 2:
            { if(yycolumn == 0){
                                                        tabNumber=1;
							flag=true;
							yybegin(IDENTACION);
                                                    }
            }
            // fall through
          case 100: break;
          case 3:
            { print_token("Salto de linea"); return symbol(sym.SL, "\n");
            }
            // fall through
          case 101: break;
          case 4:
            { /*Do nothing*/
            }
            // fall through
          case 102: break;
          case 5:
            { print_token(yytext()); 
                                                    verifyStack();
                                                    return symbol(sym.NOT, "!");
            }
            // fall through
          case 103: break;
          case 6:
            { string.setLength(0); yybegin(STRING);
            }
            // fall through
          case 104: break;
          case 7:
            { print_token(yytext()); 
                                                    verifyStack(); 
                                                    return symbol(sym.ID, yytext());
            }
            // fall through
          case 105: break;
          case 8:
            { print_token(yytext()); 
                                                    verifyStack();
                                                    return symbol(sym.MOD, "%");
            }
            // fall through
          case 106: break;
          case 9:
            { print_token(yytext()); 
                                                    verifyStack();
                                                    return symbol(sym.PA, "(");
            }
            // fall through
          case 107: break;
          case 10:
            { print_token(yytext()); 
                                                    verifyStack();  
                                                    return symbol(sym.PC, ")");
            }
            // fall through
          case 108: break;
          case 11:
            { print_token(yytext()); 
                                                    verifyStack();
                                                    return symbol(sym.MULT, "*");
            }
            // fall through
          case 109: break;
          case 12:
            { print_token(yytext()); 
                                                    verifyStack(); 
                                                    return symbol(sym.PLUS, "+");
            }
            // fall through
          case 110: break;
          case 13:
            { print_token(yytext()); 
                                                    verifyStack(); 
                                                    return symbol(sym.COMMA, ",");
            }
            // fall through
          case 111: break;
          case 14:
            { print_token(yytext()); 
                                                    verifyStack(); 
                                                    return symbol(sym.REST, "-");
            }
            // fall through
          case 112: break;
          case 15:
            { print_token(yytext()); 
                                                    verifyStack();
                                                    return symbol(sym.DIV, "/");
            }
            // fall through
          case 113: break;
          case 16:
            { print_token(yytext()); 
                                                    verifyStack(); 
                                                    return symbol(sym.ENTERO, Integer.parseInt(yytext()));
            }
            // fall through
          case 114: break;
          case 17:
            { print_token(yytext()); 
                                                    verifyStack();  
                                                    return symbol(sym.SEMICOLON, ";");
            }
            // fall through
          case 115: break;
          case 18:
            { print_token(yytext()); 
                                                    verifyStack();
                                                    return symbol(sym.MEN, "<");
            }
            // fall through
          case 116: break;
          case 19:
            { print_token(yytext()); 
                                                    verifyStack();
                                                    return symbol(sym.EQ, "=");
            }
            // fall through
          case 117: break;
          case 20:
            { print_token(yytext()); 
                                                    verifyStack();
                                                    return symbol(sym.MAY, ">");
            }
            // fall through
          case 118: break;
          case 21:
            { print_token(yytext()); 
                                                    verifyStack(); 
                                                    return symbol(sym.CA, "[");
            }
            // fall through
          case 119: break;
          case 22:
            { print_token(yytext()); 
                                                    verifyStack(); 
                                                    return symbol(sym.CC, "]");
            }
            // fall through
          case 120: break;
          case 23:
            { print_token(yytext()); 
                                                    verifyStack(); 
                                                    return symbol(sym.POT, "^");
            }
            // fall through
          case 121: break;
          case 24:
            { print_token(yytext()); 
                                                    verifyStack();
                                                    return symbol(sym.LLA, "{");
            }
            // fall through
          case 122: break;
          case 25:
            { print_token(yytext()); 
                                                    verifyStack();  
                                                    return symbol(sym.LLC, "}");
            }
            // fall through
          case 123: break;
          case 26:
            { if(stack.isEmpty()){
                                                        stackValue = 0;
                                                    } else { 
                                                        stackValue = stack.peek();
                                                    }
		
                                                    if(stackValue < tabNumber && flag==true){	
                                                        yybegin(YYINITIAL);
                                                        yypushback(1);
                                                        stack.push(tabNumber);
                                                        print_token("indent"); 
                                                        return symbol(sym.INDENT);
                                                    } else if (stackValue > tabNumber && !stack.isEmpty()){
                                                        flag = false;
                                                        yypushback(1);
                                                        stack.pop();
                                                        print_token("dedent");
							return symbol(sym.DEDENT);
                                                    } else if(stackValue == tabNumber ){
                                                        yybegin(YYINITIAL);
                                                        yypushback(1);
                                                    } else {
                					yybegin(YYINITIAL);
                                                        yypushback(1);
                                                        add_error("desidentacion", yyline+1, yycolumn+1, "desidentacion inconsistente");
                                                    }
            }
            // fall through
          case 124: break;
          case 27:
            { tabNumber++;
            }
            // fall through
          case 125: break;
          case 28:
            { string.append(yytext());
            }
            // fall through
          case 126: break;
          case 29:
            { string.append("\t");
            }
            // fall through
          case 127: break;
          case 30:
            { string.append("\n");
            }
            // fall through
          case 128: break;
          case 31:
            { string.append("\r");
            }
            // fall through
          case 129: break;
          case 32:
            { yybegin(YYINITIAL); print_token("recibi una cadena"); return symbol(sym.CADENA, string.toString());
            }
            // fall through
          case 130: break;
          case 33:
            { print_token(yytext()); 
                                                    verifyStack(); 
                                                    return symbol(sym.NULO, "!!");
            }
            // fall through
          case 131: break;
          case 34:
            { print_token(yytext()); 
                                                    verifyStack();
                                                    return symbol(sym.NEQ, "!=");
            }
            // fall through
          case 132: break;
          case 35:
            { print_token(yytext()); 
                                                    verifyStack();
                                                    return symbol(sym.AND, "&&");
            }
            // fall through
          case 133: break;
          case 36:
            { print_token(yytext()); 
                                                    verifyStack();
                                                    return symbol(sym.XOR, "&|");
            }
            // fall through
          case 134: break;
          case 37:
            { print_token(yytext()); 
                                                    verifyStack(); 
                                                    return symbol(sym.PP, "++");
            }
            // fall through
          case 135: break;
          case 38:
            { print_token(yytext()); 
                                                    verifyStack(); 
                                                    return symbol(sym.PLUSEQ, "+=");
            }
            // fall through
          case 136: break;
          case 39:
            { print_token(yytext()); 
                                                    verifyStack(); 
                                                    return symbol(sym.RR, "--");
            }
            // fall through
          case 137: break;
          case 40:
            { print_token(yytext()); 
                                                    verifyStack(); 
                                                    return symbol(sym.MENEQ, "<=");
            }
            // fall through
          case 138: break;
          case 41:
            { print_token(yytext()); 
                                                    verifyStack(); 
                                                    return symbol(sym.SAME, "==");
            }
            // fall through
          case 139: break;
          case 42:
            { print_token(yytext()); 
                                                    verifyStack(); 
                                                    return symbol(sym.MAYEQ, ">=");
            }
            // fall through
          case 140: break;
          case 43:
            { print_token("Comentario"); return symbol(sym.SL, "\n");
            }
            // fall through
          case 141: break;
          case 44:
            { print_token(yytext()); 
                                                    verifyStack();
                                                    return symbol(sym.DO, yytext());
            }
            // fall through
          case 142: break;
          case 45:
            { print_token(yytext()); 
                                                    verifyStack(); 
                                                    return symbol(sym.FA, yytext());
            }
            // fall through
          case 143: break;
          case 46:
            { print_token(yytext()); 
                                                    verifyStack();
                                                    return symbol(sym.LA, yytext());
            }
            // fall through
          case 144: break;
          case 47:
            { print_token(yytext()); 
                                                    verifyStack();
                                                    return symbol(sym.MI, yytext());
            }
            // fall through
          case 145: break;
          case 48:
            { print_token(yytext()); 
                                                    verifyStack();
                                                    return symbol(sym.RE, yytext());
            }
            // fall through
          case 146: break;
          case 49:
            { print_token(yytext()); 
                                                    verifyStack();
                                                    return symbol(sym.SI, yytext());
            }
            // fall through
          case 147: break;
          case 50:
            { print_token(yytext()); 
                                                    verifyStack();
                                                    return symbol(sym.OR, "||");
            }
            // fall through
          case 148: break;
          case 51:
            { string.append("\"");
            }
            // fall through
          case 149: break;
          case 52:
            { string.append("#");
            }
            // fall through
          case 150: break;
          case 53:
            { print_token(yytext()); 
                                                    verifyStack();
                                                    return symbol(sym.NAND, "!&&");
            }
            // fall through
          case 151: break;
          case 54:
            { print_token(yytext()); 
                                                    verifyStack(); 
                                                    return symbol(sym.NOR, "!||");
            }
            // fall through
          case 152: break;
          case 55:
            { print_token(yytext()); 
                                                    verifyStack(); 
                                                    return symbol(sym.CARACTER, yytext());
            }
            // fall through
          case 153: break;
          case 56:
            { print_token(yytext()); 
                                                    verifyStack();
                                                    return symbol(sym.DOBLE, Double.parseDouble(yytext()));
            }
            // fall through
          case 154: break;
          case 57:
            { print_token(yytext()); 
                                                    verifyStack();
                                                    return symbol(sym.DO8, yytext());
            }
            // fall through
          case 155: break;
          case 58:
            { print_token(yytext()); 
                                                    verifyStack(); 
                                                    return symbol(sym.FA8, yytext());
            }
            // fall through
          case 156: break;
          case 59:
            { print_token(yytext()); 
                                                    verifyStack(); 
                                                    return symbol(sym.LA8, yytext());
            }
            // fall through
          case 157: break;
          case 60:
            { print_token(yytext()); 
                                                    verifyStack();
                                                    return symbol(sym.MI8, yytext());
            }
            // fall through
          case 158: break;
          case 61:
            { print_token(yytext()); 
                                                    verifyStack();
                                                    return symbol(sym.RE8, yytext());
            }
            // fall through
          case 159: break;
          case 62:
            { print_token(yytext()); 
                                                    verifyStack();
                                                    return symbol(sym.SI8, yytext());
            }
            // fall through
          case 160: break;
          case 63:
            { print_token(yytext()); 
                                                    verifyStack();
                                                    return symbol(sym.SOL, yytext());
            }
            // fall through
          case 161: break;
          case 64:
            { print_token(yytext()); 
                                                    verifyStack(); 
                                                    return symbol(sym.VAR, yytext());
            }
            // fall through
          case 162: break;
          case 65:
            { print_token(yytext()); 
                                                    verifyStack();
                                                    return symbol(sym.CASE, yytext());
            }
            // fall through
          case 163: break;
          case 66:
            { print_token(yytext()); 
                                                    verifyStack();
                                                    return symbol(sym.KEEP, yytext());
            }
            // fall through
          case 164: break;
          case 67:
            { print_token(yytext()); 
                                                    verifyStack();
                                                    return symbol(sym.PARA, yytext());
            }
            // fall through
          case 165: break;
          case 68:
            { print_token(yytext()); 
                                                    verifyStack();
                                                    return symbol(sym.SINO, yytext());
            }
            // fall through
          case 166: break;
          case 69:
            { print_token(yytext()); 
                                                    verifyStack(); 
                                                    return symbol(sym.SOL8, yytext());
            }
            // fall through
          case 167: break;
          case 70:
            { print_token(yytext()); 
                                                    verifyStack();
                                                    return symbol(sym.TRUE, yytext());
            }
            // fall through
          case 168: break;
          case 71:
            { print_token(yytext()); 
                                                    verifyStack(); 
                                                    return symbol(sym.DOUBLE, yytext());
            }
            // fall through
          case 169: break;
          case 72:
            { print_token(yytext()); 
                                                    verifyStack();
                                                    return symbol(sym.FALSE, yytext());
            }
            // fall through
          case 170: break;
          case 73:
            { print_token(yytext()); 
                                                    verifyStack();
                                                    return symbol(sym.HACER, yytext());
            }
            // fall through
          case 171: break;
          case 74:
            { print_token(yytext()); 
                                                    verifyStack();
                                                    return symbol(sym.PAR, yytext());
            }
            // fall through
          case 172: break;
          case 75:
            { print_token(yytext()); 
                                                    verifyStack();
                                                    return symbol(sym.PISTA, yytext());
            }
            // fall through
          case 173: break;
          case 76:
            { print_token(yytext()); 
                                                    verifyStack();
                                                    return symbol(sym.SALIR, yytext());
            }
            // fall through
          case 174: break;
          case 77:
            { print_token(yytext()); 
                                                    verifyStack();
                                                    return symbol(sym.STRING, yytext());
            }
            // fall through
          case 175: break;
          case 78:
            { print_token(yytext()); 
                                                    verifyStack();  
                                                    return symbol(sym.INT, yytext());
            }
            // fall through
          case 176: break;
          case 79:
            { print_token(yytext()); 
                                                    verifyStack();
                                                    return symbol(sym.PRIMOS, yytext());
            }
            // fall through
          case 177: break;
          case 80:
            { print_token(yytext()); 
                                                    verifyStack();
                                                    return symbol(sym.SWITCH, yytext());
            }
            // fall through
          case 178: break;
          case 81:
            { print_token(yytext()); 
                                                    verifyStack();
                                                    return symbol(sym.ARR, yytext());
            }
            // fall through
          case 179: break;
          case 82:
            { print_token(yytext()); 
                                                    verifyStack();
                                                    return symbol(sym.BOOL, yytext());
            }
            // fall through
          case 180: break;
          case 83:
            { print_token(yytext()); 
                                                    verifyStack();
                                                    return symbol(sym.DEF, yytext());
            }
            // fall through
          case 181: break;
          case 84:
            { print_token(yytext()); 
                                                    verifyStack();
                                                    return symbol(sym.WAIT, yytext());
            }
            // fall through
          case 182: break;
          case 85:
            { print_token(yytext()); 
                                                    verifyStack();
                                                    return symbol(sym.IMPAR, yytext());
            }
            // fall through
          case 183: break;
          case 86:
            { print_token(yytext()); 
                                                    verifyStack();
                                                    return symbol(sym.MENSAJE, yytext());
            }
            // fall through
          case 184: break;
          case 87:
            { print_token(yytext()); 
                                                    verifyStack();
                                                    return symbol(sym.ORDER, yytext());
            }
            // fall through
          case 185: break;
          case 88:
            { print_token(yytext()); 
                                                    verifyStack();
                                                    return symbol(sym.RETURN, yytext());
            }
            // fall through
          case 186: break;
          case 89:
            { print_token(yytext()); 
                                                    verifyStack();   
                                                    return symbol(sym.CHAR, yytext());
            }
            // fall through
          case 187: break;
          case 90:
            { print_token(yytext()); 
                                                    verifyStack();
                                                    return symbol(sym.EXT, yytext());
            }
            // fall through
          case 188: break;
          case 91:
            { print_token(yytext()); 
                                                    verifyStack();
                                                    return symbol(sym.LONG, yytext());
            }
            // fall through
          case 189: break;
          case 92:
            { print_token(yytext()); 
                                                    verifyStack();
                                                    return symbol(sym.WHILE, yytext());
            }
            // fall through
          case 190: break;
          case 93:
            { print_token(yytext()); 
                                                    verifyStack();
                                                    return symbol(sym.CONT, yytext());
            }
            // fall through
          case 191: break;
          case 94:
            { print_token(yytext()); 
                                                    verifyStack();
                                                    return symbol(sym.PRINCIPAL, yytext());
            }
            // fall through
          case 192: break;
          case 95:
            { print_token(yytext()); 
                                                    verifyStack();
                                                    return symbol(sym.SUM, yytext());
            }
            // fall through
          case 193: break;
          case 96:
            { print_token(yytext()); 
                                                    verifyStack();
                                                    return symbol(sym.ASC, yytext());
            }
            // fall through
          case 194: break;
          case 97:
            { print_token(yytext()); 
                                                    verifyStack();
                                                    return symbol(sym.PLAY, yytext());
            }
            // fall through
          case 195: break;
          case 98:
            { print_token(yytext()); 
                                                    verifyStack();
                                                    return symbol(sym.DESC, yytext());
            }
            // fall through
          case 196: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Converts an int token code into the name of the
   * token by reflection on the cup symbol class/interface sym
   */
  private static String getTokenName(int token) {
    try {
      java.lang.reflect.Field [] classFields = sym.class.getFields();
      for (int i = 0; i < classFields.length; i++) {
        if (classFields[i].getInt(null) == token) {
          return classFields[i].getName();
        }
      }
    } catch (Exception e) {
      e.printStackTrace(System.err);
    }

    return "UNKNOWN TOKEN";
  }

  /**
   * Same as next_token but also prints the token to standard out
   * for debugging.
   */
  public java_cup.runtime.Symbol debug_next_token() throws java.io.IOException {
    java_cup.runtime.Symbol s = next_token();
    System.out.println( "line:" + (yyline+1) + " col:" + (yycolumn+1) + " --"+ yytext() + "--" + getTokenName(s.sym) + "--");
    return s;
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String[] argv) {
    if (argv.length == 0) {
      System.out.println("Usage : java MusicLexer [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          // Side-effect: is encodingName valid?
          java.nio.charset.Charset.forName(encodingName);
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        MusicLexer scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new MusicLexer(reader);
          while ( !scanner.zzAtEOF ) scanner.debug_next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
