/* The following code was generated by JFlex 1.4.1 on 8/29/21, 8:41 PM */

package interpreter.lexer;

import java.io.*;
import javax.swing.text.Segment;   

import org.fife.ui.rsyntaxtextarea.*; 


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 8/29/21, 8:41 PM from the specification file
 * <tt>/home/zofia-px/Documents/OLC2_CUNOC/music-player/src/main/java/interpreter/lexer/TextEditorLexer.jflex</tt>
 */
public class TextEditorTokenMaker extends AbstractJFlexCTokenMaker {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int MULTILINECOMMENT = 1;
  public static final int YYINITIAL = 0;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\7\1\13\1\0\1\7\1\4\22\0\1\7\1\67\1\5"+
    "\1\6\1\0\1\73\1\70\1\10\2\20\1\73\1\72\1\4\1\16"+
    "\1\14\1\4\12\2\1\4\1\4\1\15\1\66\1\17\1\4\1\0"+
    "\1\50\1\45\1\46\1\43\1\26\1\40\1\1\1\57\1\62\1\1"+
    "\1\32\1\64\1\55\1\1\1\61\1\21\1\1\1\60\1\52\1\36"+
    "\1\1\1\33\4\1\1\20\1\3\1\20\1\73\1\1\1\0\1\24"+
    "\1\44\1\47\1\31\1\30\1\42\1\51\1\54\1\22\1\65\1\32"+
    "\1\41\1\56\1\12\1\35\1\25\1\1\1\34\1\23\1\11\1\37"+
    "\1\33\1\53\1\27\1\1\1\63\1\20\1\71\1\20\1\4\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\2\1\1\2\1\3\1\4\1\5\1\1\1\6"+
    "\3\7\1\10\20\1\2\7\2\1\2\7\1\11\1\12"+
    "\1\11\1\13\1\0\1\3\1\14\1\3\2\5\1\15"+
    "\1\0\1\1\1\16\1\17\4\1\1\20\12\1\1\20"+
    "\3\1\1\20\1\1\2\20\5\1\1\20\1\1\2\0"+
    "\1\21\1\22\1\23\1\5\2\24\5\1\1\20\14\1"+
    "\1\20\15\1\1\15\72\1";

  private static int [] zzUnpackAction() {
    int [] result = new int[180];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\74\0\170\0\264\0\360\0\u012c\0\u0168\0\u01a4"+
    "\0\u01e0\0\170\0\u021c\0\u0258\0\u0294\0\170\0\u02d0\0\u030c"+
    "\0\u0348\0\u0384\0\u03c0\0\u03fc\0\u0438\0\u0474\0\u04b0\0\u04ec"+
    "\0\u0528\0\u0564\0\u05a0\0\u05dc\0\u0618\0\u0654\0\u0690\0\u06cc"+
    "\0\u0708\0\u0744\0\u0780\0\170\0\u07bc\0\170\0\u07f8\0\u0834"+
    "\0\u0870\0\u08ac\0\170\0\u08e8\0\u0924\0\u0960\0\u099c\0\u099c"+
    "\0\u09d8\0\170\0\u0a14\0\u0a50\0\u0a8c\0\u0ac8\0\u0b04\0\u0b40"+
    "\0\u0b7c\0\u0bb8\0\u0bf4\0\u0c30\0\u0c6c\0\u0ca8\0\u0ce4\0\u0d20"+
    "\0\u0d5c\0\u0d98\0\u0dd4\0\u0e10\0\u0e4c\0\u0e88\0\u0ec4\0\u0f00"+
    "\0\u0f3c\0\u0f78\0\u0fb4\0\u0ff0\0\u102c\0\u1068\0\u10a4\0\u10e0"+
    "\0\u111c\0\u1158\0\u0744\0\170\0\u0870\0\170\0\u1194\0\170"+
    "\0\u099c\0\u11d0\0\u120c\0\u1248\0\u1284\0\u12c0\0\170\0\u12fc"+
    "\0\u1338\0\u1374\0\u13b0\0\u13ec\0\u1428\0\u1464\0\u14a0\0\u14dc"+
    "\0\u1518\0\u1554\0\u1590\0\264\0\u15cc\0\u1608\0\u1644\0\u1680"+
    "\0\u16bc\0\u16f8\0\u1734\0\u1770\0\u17ac\0\u17e8\0\u1824\0\u1860"+
    "\0\u189c\0\170\0\u18d8\0\u1914\0\u1950\0\u198c\0\u19c8\0\u1a04"+
    "\0\u1a40\0\u1a7c\0\u1ab8\0\u1af4\0\u1b30\0\u1b6c\0\u1ba8\0\u1be4"+
    "\0\u1c20\0\u1c5c\0\u1c98\0\u1cd4\0\u1d10\0\u1d4c\0\u1d88\0\u1dc4"+
    "\0\u1e00\0\u1e3c\0\u1e78\0\u1eb4\0\u1ef0\0\u1f2c\0\u1f68\0\u1fa4"+
    "\0\u1fe0\0\u201c\0\u2058\0\u2094\0\u20d0\0\u210c\0\u2148\0\u2184"+
    "\0\u21c0\0\u21fc\0\u2238\0\u2274\0\u22b0\0\u22ec\0\u2328\0\u2364"+
    "\0\u23a0\0\u23dc\0\u2418\0\u2454\0\u2490\0\u24cc\0\u2508\0\u2544"+
    "\0\u2580\0\u25bc\0\u25f8\0\u2634";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[180];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\2\3\1\6\1\3\1\7\1\10"+
    "\1\11\1\4\1\12\1\3\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\17\1\23\1\4\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\11\1\4\1\31"+
    "\1\32\1\31\1\24\2\33\2\34\1\22\1\4\1\21"+
    "\1\4\1\35\2\36\1\35\1\27\1\30\1\20\1\4"+
    "\1\32\1\4\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\13\45\1\46\2\45\1\47\55\45\75\0\2\4\6\0"+
    "\2\4\6\0\45\4\6\0\2\50\1\5\1\50\2\0"+
    "\1\50\2\0\2\50\1\0\1\51\4\0\45\50\6\0"+
    "\3\6\1\52\1\6\1\53\5\6\1\54\60\6\7\0"+
    "\1\7\64\0\6\55\1\56\1\55\1\57\2\55\1\60"+
    "\60\55\1\0\2\4\6\0\2\4\6\0\13\4\1\61"+
    "\31\4\24\0\1\62\47\0\1\44\23\0\1\44\74\0"+
    "\1\63\46\0\1\44\6\0\2\4\6\0\2\4\6\0"+
    "\1\4\1\64\1\4\1\65\7\4\1\66\31\4\7\0"+
    "\2\4\6\0\2\4\6\0\35\4\1\67\7\4\7\0"+
    "\2\4\6\0\2\4\6\0\1\4\1\70\1\4\1\71"+
    "\10\4\1\72\1\4\1\73\13\4\1\74\12\4\7\0"+
    "\2\4\6\0\2\4\6\0\2\4\1\75\10\4\1\76"+
    "\31\4\7\0\2\4\6\0\1\4\1\77\6\0\2\4"+
    "\1\100\3\4\1\101\36\4\7\0\2\4\6\0\2\4"+
    "\6\0\7\4\1\102\4\4\1\103\30\4\7\0\2\4"+
    "\6\0\2\4\6\0\7\4\1\104\35\4\7\0\2\4"+
    "\6\0\2\4\6\0\3\4\1\105\3\4\1\106\35\4"+
    "\7\0\2\4\6\0\2\4\6\0\7\4\1\107\35\4"+
    "\7\0\2\4\6\0\2\4\6\0\13\4\1\110\31\4"+
    "\7\0\2\4\6\0\2\4\6\0\3\4\1\111\41\4"+
    "\7\0\2\4\6\0\2\4\6\0\3\4\1\112\10\4"+
    "\1\113\30\4\7\0\2\4\6\0\2\4\6\0\14\4"+
    "\1\114\30\4\7\0\2\4\6\0\2\4\6\0\3\4"+
    "\1\115\10\4\1\116\30\4\7\0\2\4\6\0\2\4"+
    "\6\0\3\4\1\117\41\4\7\0\2\4\6\0\2\4"+
    "\6\0\1\4\1\120\5\4\1\121\35\4\74\0\1\44"+
    "\73\0\2\44\1\122\1\123\72\0\2\44\73\0\1\44"+
    "\70\0\1\44\3\0\1\44\1\0\13\45\1\0\2\45"+
    "\1\0\55\45\17\0\1\124\54\0\4\50\2\0\1\50"+
    "\2\0\2\50\6\0\45\50\10\0\1\125\71\0\13\54"+
    "\1\0\63\54\1\52\1\54\1\126\66\54\10\127\1\130"+
    "\2\127\1\0\66\127\1\55\1\127\1\131\2\55\1\0"+
    "\60\127\10\0\1\130\64\0\2\4\6\0\2\4\6\0"+
    "\16\4\1\132\26\4\6\0\13\63\1\0\60\63\1\0"+
    "\2\4\6\0\2\4\6\0\2\4\1\133\42\4\7\0"+
    "\2\4\6\0\2\4\6\0\13\4\1\134\31\4\7\0"+
    "\2\4\6\0\2\4\6\0\1\4\1\135\43\4\7\0"+
    "\2\4\6\0\2\4\6\0\4\4\1\136\40\4\7\0"+
    "\2\4\3\0\1\137\2\0\1\4\1\140\6\0\45\4"+
    "\7\0\2\4\6\0\2\4\6\0\20\4\1\141\24\4"+
    "\7\0\2\4\6\0\2\4\6\0\20\4\1\112\24\4"+
    "\7\0\2\4\6\0\2\4\6\0\35\4\1\142\7\4"+
    "\7\0\2\4\6\0\2\4\6\0\1\4\1\143\43\4"+
    "\7\0\2\4\6\0\2\4\6\0\26\4\1\144\16\4"+
    "\7\0\2\4\6\0\2\4\6\0\13\4\1\145\31\4"+
    "\7\0\2\4\6\0\1\146\1\4\6\0\45\4\7\0"+
    "\2\4\6\0\2\4\6\0\4\4\1\147\40\4\7\0"+
    "\2\4\6\0\1\150\1\4\6\0\45\4\7\0\2\4"+
    "\6\0\2\4\6\0\2\4\1\75\16\4\1\151\23\4"+
    "\7\0\2\4\3\0\1\137\2\0\2\4\6\0\23\4"+
    "\1\152\21\4\7\0\2\4\6\0\2\4\6\0\7\4"+
    "\1\153\35\4\7\0\2\4\6\0\2\4\6\0\13\4"+
    "\1\154\31\4\7\0\2\4\6\0\2\4\6\0\13\4"+
    "\1\155\31\4\7\0\2\4\3\0\1\137\2\0\1\156"+
    "\1\4\6\0\4\4\1\157\40\4\7\0\2\4\6\0"+
    "\2\4\6\0\10\4\1\160\34\4\7\0\2\4\3\0"+
    "\1\137\2\0\2\4\6\0\20\4\1\161\24\4\7\0"+
    "\2\4\3\0\1\137\2\0\2\4\6\0\45\4\7\0"+
    "\2\4\6\0\1\4\1\162\6\0\45\4\7\0\2\4"+
    "\6\0\2\4\6\0\14\4\1\163\30\4\7\0\2\4"+
    "\6\0\2\4\6\0\2\4\1\140\5\4\1\164\2\4"+
    "\1\165\31\4\7\0\2\4\6\0\1\4\1\166\6\0"+
    "\45\4\7\0\2\4\6\0\2\4\6\0\26\4\1\167"+
    "\16\4\7\0\2\4\3\0\1\137\2\0\2\4\6\0"+
    "\7\4\1\170\35\4\7\0\2\4\6\0\1\4\1\171"+
    "\6\0\45\4\76\0\1\44\3\0\10\127\1\172\2\127"+
    "\1\0\60\127\1\0\2\4\6\0\2\4\6\0\7\4"+
    "\1\154\35\4\7\0\2\4\6\0\1\173\1\4\6\0"+
    "\45\4\7\0\2\4\6\0\2\4\6\0\3\4\1\154"+
    "\3\4\1\174\35\4\7\0\2\4\6\0\1\4\1\175"+
    "\6\0\35\4\1\176\7\4\7\0\2\4\6\0\2\4"+
    "\6\0\3\4\1\177\41\4\7\0\2\4\6\0\2\4"+
    "\6\0\14\4\1\154\30\4\7\0\2\4\6\0\2\4"+
    "\6\0\1\4\1\105\43\4\7\0\2\4\6\0\2\4"+
    "\6\0\3\4\1\200\41\4\7\0\2\4\6\0\1\201"+
    "\1\4\6\0\45\4\7\0\2\4\6\0\2\4\6\0"+
    "\7\4\1\202\35\4\7\0\2\4\6\0\2\4\6\0"+
    "\7\4\1\203\35\4\7\0\2\4\6\0\2\4\6\0"+
    "\7\4\1\204\35\4\7\0\2\4\6\0\2\4\6\0"+
    "\7\4\1\205\35\4\7\0\2\4\6\0\2\4\6\0"+
    "\1\4\1\206\43\4\7\0\2\4\6\0\2\4\6\0"+
    "\3\4\1\207\41\4\7\0\2\4\6\0\2\4\6\0"+
    "\20\4\1\132\24\4\7\0\2\4\6\0\2\4\6\0"+
    "\4\4\1\154\40\4\7\0\2\4\6\0\2\4\6\0"+
    "\10\4\1\210\34\4\7\0\2\4\6\0\2\4\6\0"+
    "\14\4\1\211\30\4\7\0\2\4\6\0\2\4\6\0"+
    "\13\4\1\212\31\4\7\0\2\4\6\0\2\4\6\0"+
    "\7\4\1\213\35\4\7\0\2\4\6\0\2\4\6\0"+
    "\2\4\1\214\42\4\7\0\2\4\6\0\2\4\6\0"+
    "\30\4\1\215\14\4\7\0\2\4\6\0\2\4\6\0"+
    "\20\4\1\216\24\4\7\0\2\4\6\0\2\4\6\0"+
    "\7\4\1\217\35\4\7\0\2\4\6\0\2\4\6\0"+
    "\3\4\1\220\41\4\7\0\2\4\6\0\1\221\1\4"+
    "\6\0\45\4\7\0\2\4\6\0\2\4\6\0\7\4"+
    "\1\105\35\4\7\0\2\4\6\0\1\4\1\222\6\0"+
    "\45\4\7\0\2\4\6\0\2\4\6\0\2\4\1\223"+
    "\42\4\7\0\2\4\6\0\2\4\6\0\3\4\1\154"+
    "\41\4\7\0\2\4\6\0\2\4\6\0\2\4\1\154"+
    "\42\4\7\0\2\4\6\0\2\4\6\0\26\4\1\224"+
    "\16\4\7\0\2\4\6\0\2\4\6\0\14\4\1\174"+
    "\30\4\7\0\2\4\6\0\2\4\6\0\13\4\1\225"+
    "\31\4\7\0\2\4\6\0\2\4\6\0\13\4\1\226"+
    "\31\4\7\0\2\4\6\0\2\4\6\0\26\4\1\227"+
    "\16\4\7\0\2\4\6\0\1\4\1\230\6\0\45\4"+
    "\7\0\2\4\6\0\2\4\6\0\30\4\1\231\14\4"+
    "\7\0\2\4\6\0\2\4\6\0\13\4\1\140\31\4"+
    "\7\0\2\4\6\0\2\4\6\0\13\4\1\232\31\4"+
    "\7\0\2\4\6\0\2\4\6\0\7\4\1\233\35\4"+
    "\7\0\2\4\6\0\2\4\6\0\16\4\1\234\26\4"+
    "\7\0\2\4\6\0\2\4\6\0\3\4\1\235\41\4"+
    "\7\0\2\4\6\0\2\4\6\0\13\4\1\217\31\4"+
    "\7\0\2\4\6\0\2\4\6\0\14\4\1\236\30\4"+
    "\7\0\2\4\6\0\1\4\1\232\6\0\45\4\7\0"+
    "\2\4\6\0\2\4\6\0\7\4\1\154\4\4\1\154"+
    "\30\4\7\0\2\4\6\0\2\4\6\0\1\4\1\237"+
    "\43\4\7\0\2\4\6\0\2\4\6\0\7\4\1\240"+
    "\35\4\7\0\2\4\6\0\1\4\1\173\6\0\45\4"+
    "\7\0\2\4\6\0\2\4\6\0\26\4\1\241\16\4"+
    "\7\0\2\4\6\0\2\4\6\0\1\4\1\242\43\4"+
    "\7\0\2\4\6\0\1\243\1\4\6\0\45\4\7\0"+
    "\2\4\6\0\2\4\6\0\3\4\1\244\41\4\7\0"+
    "\2\4\6\0\2\4\6\0\1\4\1\245\43\4\7\0"+
    "\2\4\6\0\2\4\6\0\7\4\1\174\35\4\7\0"+
    "\2\4\6\0\2\4\6\0\1\4\1\246\43\4\7\0"+
    "\2\4\6\0\2\4\6\0\33\4\1\154\11\4\7\0"+
    "\2\4\6\0\2\4\6\0\10\4\1\247\34\4\7\0"+
    "\2\4\6\0\2\4\6\0\20\4\1\140\24\4\7\0"+
    "\2\4\6\0\2\4\6\0\3\4\1\105\41\4\7\0"+
    "\2\4\6\0\1\4\1\250\6\0\45\4\7\0\2\4"+
    "\6\0\2\4\6\0\20\4\1\251\24\4\7\0\2\4"+
    "\6\0\2\4\6\0\10\4\1\146\34\4\7\0\2\4"+
    "\6\0\2\4\6\0\10\4\1\252\34\4\7\0\2\4"+
    "\6\0\1\253\1\4\6\0\45\4\7\0\2\4\6\0"+
    "\2\4\6\0\3\4\1\254\41\4\7\0\2\4\6\0"+
    "\1\167\1\4\6\0\45\4\7\0\2\4\6\0\1\4"+
    "\1\255\6\0\45\4\7\0\2\4\6\0\2\4\6\0"+
    "\13\4\1\256\31\4\7\0\2\4\6\0\2\4\6\0"+
    "\44\4\1\132\7\0\2\4\6\0\2\4\6\0\4\4"+
    "\1\257\40\4\7\0\2\4\6\0\2\4\6\0\42\4"+
    "\1\232\2\4\7\0\2\4\6\0\2\4\6\0\7\4"+
    "\1\260\35\4\7\0\2\4\6\0\2\4\6\0\10\4"+
    "\1\132\34\4\7\0\2\4\6\0\1\154\1\4\6\0"+
    "\45\4\7\0\2\4\6\0\2\4\6\0\16\4\1\261"+
    "\26\4\7\0\2\4\6\0\2\4\6\0\16\4\1\262"+
    "\26\4\7\0\2\4\6\0\1\4\1\154\6\0\45\4"+
    "\7\0\2\4\6\0\2\4\6\0\16\4\1\232\26\4"+
    "\7\0\2\4\6\0\2\4\6\0\3\4\1\174\41\4"+
    "\7\0\2\4\6\0\2\4\6\0\3\4\1\263\41\4"+
    "\7\0\2\4\6\0\1\4\1\264\6\0\45\4\7\0"+
    "\2\4\6\0\2\4\6\0\26\4\1\141\16\4\7\0"+
    "\2\4\6\0\2\4\6\0\10\4\1\154\34\4\7\0"+
    "\2\4\6\0\2\4\6\0\20\4\1\154\24\4\7\0"+
    "\2\4\6\0\1\132\1\4\6\0\45\4\6\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9840];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\6\1\1\11\3\1\1\11\25\1\1\11"+
    "\1\1\1\11\2\1\1\0\1\1\1\11\4\1\1\0"+
    "\1\1\1\11\37\1\2\0\1\11\1\1\1\11\1\1"+
    "\1\11\6\1\1\11\32\1\1\11\72\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[180];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
    public TextEditorTokenMaker() {
    }
    
    private void addHyperLinkToken(int start, int end, int tokenType) {
        int temporal = start + offsetShift;
        addToken(zzBuffer, start,end, tokenType, temporal, true);
    }
    
    private void addToken(int tokenType) {   
        addToken(zzStartRead, zzMarkedPos-1, tokenType);   
    }

    private void addToken(int start, int end, int tokenType) {   
        int temporal = start + offsetShift;   
        addToken(zzBuffer, start,end, tokenType, temporal, false);   
    }   

    public void addToken(char[] array, int start, int end, int tokenType, int startOffset, boolean hyperlink) {   
        super.addToken(array, start,end, tokenType, startOffset, hyperlink);   
        zzStartRead = zzMarkedPos;   
    }

    public String[] getLineCommentStartAndEnd() {   
        return new String[] { "//", null };   
    }
    
    public Token getTokenList(Segment text, int initialTokenType, int startOffset) {   
        resetTokenList();   
        this.offsetShift = -text.offset + startOffset;   

        // Start off in the proper state.   
        int state = Token.NULL;   
        switch (initialTokenType) {   
            case Token.COMMENT_MULTILINE:   
                state = MULTILINECOMMENT;   
                start = text.offset;   
            break;   
            default:   
               state = Token.NULL;   
        }   
        s = text;   
        try {   
           yyreset(zzReader);   
           yybegin(state);   
           return yylex();   
        } catch (IOException ioe) {   
           ioe.printStackTrace();   
           return new TokenImpl();   
        }   
    }  

    private boolean zzRefill() {   
        return zzCurrentPos>=s.offset+s.count;   
    }

    public final void yyreset(Reader reader) {   
        zzBuffer = s.array;    
        zzStartRead = s.offset;   
        zzEndRead = zzStartRead + s.count - 1;   
        zzCurrentPos = zzMarkedPos = zzPushbackPos = s.offset;   
        zzLexicalState = YYINITIAL;   
        zzReader = reader;   
        zzAtBOL  = true;   
        zzAtEOF  = false;   
    }   



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public TextEditorTokenMaker(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public TextEditorTokenMaker(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 180) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  } 
    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }

  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 6: 
          { addNullToken(); return firstToken;
          }
        case 21: break;
        case 20: 
          { addToken(Token.LITERAL_CHAR);
          }
        case 22: break;
        case 4: 
          { addToken(Token.WHITESPACE);
          }
        case 23: break;
        case 19: 
          { addToken(Token.ERROR_STRING_DOUBLE);
          }
        case 24: break;
        case 18: 
          { addToken(Token.LITERAL_NUMBER_FLOAT);
          }
        case 25: break;
        case 16: 
          { addToken(Token.RESERVED_WORD);
          }
        case 26: break;
        case 8: 
          { addToken(Token.SEPARATOR);
          }
        case 27: break;
        case 1: 
          { addToken(Token.IDENTIFIER);
          }
        case 28: break;
        case 5: 
          { addToken(Token.ERROR_CHAR); addNullToken(); return firstToken;
          }
        case 29: break;
        case 3: 
          { addToken(Token.ERROR_STRING_DOUBLE); addNullToken(); return firstToken;
          }
        case 30: break;
        case 17: 
          { yybegin(YYINITIAL); addToken(start,zzStartRead+2-1, Token.COMMENT_MULTILINE);
          }
        case 31: break;
        case 13: 
          { addToken(Token.ERROR_CHAR);
          }
        case 32: break;
        case 12: 
          { addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);
          }
        case 33: break;
        case 15: 
          { addToken(Token.COMMENT_EOL); addNullToken(); return firstToken;
          }
        case 34: break;
        case 11: 
          { addToken(Token.ERROR_NUMBER_FORMAT);
          }
        case 35: break;
        case 2: 
          { addToken(Token.LITERAL_NUMBER_DECIMAL_INT);
          }
        case 36: break;
        case 7: 
          { addToken(Token.OPERATOR);
          }
        case 37: break;
        case 14: 
          { start = zzMarkedPos-2; yybegin(MULTILINECOMMENT);
          }
        case 38: break;
        case 9: 
          { 
          }
        case 39: break;
        case 10: 
          { addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
          }
        case 40: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case MULTILINECOMMENT: {
              addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
            }
            case 181: break;
            case YYINITIAL: {
              addNullToken(); return firstToken;
            }
            case 182: break;
            default:
            return null;
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
