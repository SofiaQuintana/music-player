
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package interpreter.parser;

import java_cup.runtime.Symbol;
import interpreter.lexer.MusicLexer;
import java.util.HashMap;
import java.util.LinkedList;
import dummy_classes.Array;
import dummy_classes.Case;
import interpreter.abstract_syntax_tree.environment.GlobalError;
import interpreter.abstract_syntax_tree.environment.EnumType;
import interpreter.abstract_syntax_tree.instruction.Instruction;
import interpreter.abstract_syntax_tree.instruction.NoteType;
import interpreter.abstract_syntax_tree.instruction.Track;
import interpreter.abstract_syntax_tree.instruction.Declaration;
import interpreter.abstract_syntax_tree.instruction.Assignation;
import interpreter.abstract_syntax_tree.instruction.Break;
import interpreter.abstract_syntax_tree.instruction.Continue;
import interpreter.abstract_syntax_tree.instruction.Return;
import interpreter.abstract_syntax_tree.instruction.Expression;
import interpreter.abstract_syntax_tree.instruction.ExpressionType;
import interpreter.abstract_syntax_tree.instruction.FunctionCall;
import interpreter.abstract_syntax_tree.instruction.PrincipalFunction;
import interpreter.abstract_syntax_tree.instruction.If;
import interpreter.abstract_syntax_tree.instruction.For;
import interpreter.abstract_syntax_tree.instruction.While;
import interpreter.abstract_syntax_tree.instruction.DoWhile;
import interpreter.abstract_syntax_tree.instruction.Switch;
import interpreter.abstract_syntax_tree.instruction.Function;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class MusicParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public MusicParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public MusicParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public MusicParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\222\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\010\007\000\002\010\005" +
    "\000\002\011\005\000\002\011\003\000\002\004\004\000" +
    "\002\004\003\000\002\013\003\000\002\013\003\000\002" +
    "\013\003\000\002\013\003\000\002\013\003\000\002\005" +
    "\004\000\002\005\003\000\002\014\004\000\002\014\004" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\004\000\002" +
    "\014\004\000\002\014\005\000\002\014\004\000\002\014" +
    "\003\000\002\007\006\000\002\007\004\000\002\006\006" +
    "\000\002\006\004\000\002\015\007\000\002\015\005\000" +
    "\002\015\006\000\002\015\012\000\002\016\007\000\002" +
    "\017\010\000\002\017\006\000\002\017\007\000\002\017" +
    "\013\000\002\020\006\000\002\020\004\000\002\012\005" +
    "\000\002\012\003\000\002\021\006\000\002\021\005\000" +
    "\002\023\003\000\002\023\003\000\002\024\004\000\002" +
    "\024\003\000\002\025\007\000\002\025\005\000\002\022" +
    "\005\000\002\022\003\000\002\026\003\000\002\026\003" +
    "\000\002\026\003\000\002\026\003\000\002\026\003\000" +
    "\002\027\005\000\002\027\005\000\002\027\006\000\002" +
    "\030\006\000\002\030\007\000\002\031\007\000\002\031" +
    "\010\000\002\031\010\000\002\031\011\000\002\032\004" +
    "\000\002\033\011\000\002\033\010\000\002\034\013\000" +
    "\002\034\013\000\002\034\013\000\002\034\013\000\002" +
    "\040\004\000\002\040\004\000\002\035\007\000\002\036" +
    "\011\000\002\037\010\000\002\042\006\000\002\042\005" +
    "\000\002\042\005\000\002\044\007\000\002\044\010\000" +
    "\002\044\006\000\002\044\007\000\002\044\010\000\002" +
    "\044\011\000\002\044\007\000\002\044\010\000\002\045" +
    "\003\000\002\045\003\000\002\045\003\000\002\045\003" +
    "\000\002\045\003\000\002\045\003\000\002\045\003\000" +
    "\002\046\006\000\002\046\004\000\002\043\003\000\002" +
    "\043\003\000\002\043\003\000\002\043\003\000\002\043" +
    "\003\000\002\043\003\000\002\043\003\000\002\043\003" +
    "\000\002\043\003\000\002\043\003\000\002\043\003\000" +
    "\002\043\003\000\002\043\003\000\002\043\003\000\002" +
    "\041\005\000\002\041\005\000\002\041\005\000\002\041" +
    "\005\000\002\041\005\000\002\041\005\000\002\041\005" +
    "\000\002\041\005\000\002\041\005\000\002\041\005\000" +
    "\002\041\005\000\002\041\005\000\002\041\005\000\002" +
    "\041\005\000\002\041\005\000\002\041\005\000\002\041" +
    "\005\000\002\041\004\000\002\041\004\000\002\041\004" +
    "\000\002\041\005\000\002\041\003\000\002\041\003\000" +
    "\002\041\003\000\002\041\003\000\002\041\003\000\002" +
    "\041\004\000\002\041\003\000\002\041\003\000\002\041" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0128\000\004\051\006\001\002\000\004\002\u012a\001" +
    "\002\000\006\002\000\051\006\001\002\000\004\006\010" +
    "\001\002\000\006\002\ufffe\051\ufffe\001\002\000\006\050" +
    "\012\052\013\001\002\000\006\002\ufffc\051\ufffc\001\002" +
    "\000\006\047\023\050\021\001\002\000\004\006\014\001" +
    "\002\000\006\015\ufffa\050\ufffa\001\002\000\006\015\016" +
    "\050\012\001\002\000\004\006\020\001\002\000\006\002" +
    "\ufffd\051\ufffd\001\002\000\006\015\ufffb\050\ufffb\001\002" +
    "\000\006\047\276\050\021\001\002\000\006\002\uffe3\051" +
    "\uffe3\001\002\000\042\006\041\050\044\053\030\056\047" +
    "\057\032\060\053\061\046\062\034\063\042\100\033\101" +
    "\050\102\037\110\035\111\026\112\052\113\043\001\002" +
    "\000\044\006\ufff7\046\ufff7\050\ufff7\053\ufff7\056\ufff7\057" +
    "\ufff7\060\ufff7\061\ufff7\062\ufff7\063\ufff7\100\ufff7\101\ufff7" +
    "\102\ufff7\110\ufff7\111\ufff7\112\ufff7\113\ufff7\001\002\000" +
    "\020\006\041\100\033\101\050\102\037\110\035\111\026" +
    "\112\052\001\002\000\004\007\uff9f\001\002\000\044\006" +
    "\ufff8\046\ufff8\050\ufff8\053\ufff8\056\ufff8\057\ufff8\060\ufff8" +
    "\061\ufff8\062\ufff8\063\ufff8\100\ufff8\101\ufff8\102\ufff8\110" +
    "\ufff8\111\ufff8\112\ufff8\113\ufff8\001\002\000\036\006\041" +
    "\056\231\057\032\060\053\061\046\062\034\063\042\100" +
    "\033\101\050\102\037\110\035\111\026\112\052\113\233" +
    "\001\002\000\044\006\041\046\227\050\044\053\030\056" +
    "\047\057\032\060\053\061\046\062\034\063\042\100\033" +
    "\101\050\102\037\110\035\111\026\112\052\113\043\001" +
    "\002\000\022\006\uffc9\064\uffc9\100\uffc9\101\uffc9\102\uffc9" +
    "\110\uffc9\111\uffc9\112\uffc9\001\002\000\004\007\uffa3\001" +
    "\002\000\022\006\uffc6\064\uffc6\100\uffc6\101\uffc6\102\uffc6" +
    "\110\uffc6\111\uffc6\112\uffc6\001\002\000\004\007\uffa0\001" +
    "\002\000\044\006\ufff5\046\ufff5\050\ufff5\053\ufff5\056\ufff5" +
    "\057\ufff5\060\ufff5\061\ufff5\062\ufff5\063\ufff5\100\ufff5\101" +
    "\ufff5\102\ufff5\110\ufff5\111\ufff5\112\ufff5\113\ufff5\001\002" +
    "\000\004\007\uffa1\001\002\000\044\006\ufff6\046\ufff6\050" +
    "\ufff6\053\ufff6\056\ufff6\057\ufff6\060\ufff6\061\ufff6\062\ufff6" +
    "\063\ufff6\100\ufff6\101\ufff6\102\ufff6\110\ufff6\111\ufff6\112" +
    "\ufff6\113\ufff6\001\002\000\004\007\uffa4\001\002\000\022" +
    "\006\uffc5\064\uffc5\100\uffc5\101\uffc5\102\uffc5\110\uffc5\111" +
    "\uffc5\112\uffc5\001\002\000\004\007\223\001\002\000\044" +
    "\006\ufff3\046\ufff3\050\ufff3\053\ufff3\056\ufff3\057\ufff3\060" +
    "\ufff3\061\ufff3\062\ufff3\063\ufff3\100\ufff3\101\ufff3\102\ufff3" +
    "\110\ufff3\111\ufff3\112\ufff3\113\ufff3\001\002\000\004\007" +
    "\210\001\002\000\022\006\uffc7\064\uffc7\100\uffc7\101\uffc7" +
    "\102\uffc7\110\uffc7\111\uffc7\112\uffc7\001\002\000\014\057" +
    "\032\060\053\061\046\062\034\063\042\001\002\000\004" +
    "\007\uffa2\001\002\000\044\006\ufff4\046\ufff4\050\ufff4\053" +
    "\ufff4\056\ufff4\057\ufff4\060\ufff4\061\ufff4\062\ufff4\063\ufff4" +
    "\100\ufff4\101\ufff4\102\ufff4\110\ufff4\111\ufff4\112\ufff4\113" +
    "\ufff4\001\002\000\004\007\uff9e\001\002\000\022\006\uffc8" +
    "\064\uffc8\100\uffc8\101\uffc8\102\uffc8\110\uffc8\111\uffc8\112" +
    "\uffc8\001\002\000\006\006\055\064\057\001\002\000\050" +
    "\006\uffd4\015\uffd4\030\uffd4\046\uffd4\050\uffd4\053\uffd4\056" +
    "\uffd4\057\uffd4\060\uffd4\061\uffd4\062\uffd4\063\uffd4\100\uffd4" +
    "\101\uffd4\102\uffd4\110\uffd4\111\uffd4\112\uffd4\113\uffd4\001" +
    "\002\000\050\006\uffdf\015\204\030\205\046\uffdf\050\uffdf" +
    "\053\uffdf\056\uffdf\057\uffdf\060\uffdf\061\uffdf\062\uffdf\063" +
    "\uffdf\100\uffdf\101\uffdf\102\uffdf\110\uffdf\111\uffdf\112\uffdf" +
    "\113\uffdf\001\002\000\004\006\060\001\002\000\004\013" +
    "\167\001\002\000\050\006\uffde\015\062\030\063\046\uffde" +
    "\050\uffde\053\uffde\056\uffde\057\uffde\060\uffde\061\uffde\062" +
    "\uffde\063\uffde\100\uffde\101\uffde\102\uffde\110\uffde\111\uffde" +
    "\112\uffde\113\uffde\001\002\000\004\006\201\001\002\000" +
    "\004\011\064\001\002\000\032\004\074\005\066\006\073" +
    "\007\104\011\075\026\106\036\067\037\103\054\072\055" +
    "\101\131\105\132\100\001\002\000\142\004\uff70\005\uff70" +
    "\006\uff70\007\uff70\010\uff70\012\uff70\014\uff70\015\uff70\016" +
    "\uff70\022\uff70\023\uff70\024\uff70\025\uff70\026\uff70\027\uff70" +
    "\031\uff70\032\uff70\033\uff70\034\uff70\035\uff70\036\uff70\037" +
    "\uff70\040\uff70\041\uff70\042\uff70\043\uff70\044\uff70\045\uff70" +
    "\046\uff70\050\uff70\053\uff70\054\uff70\055\uff70\056\uff70\057" +
    "\uff70\060\uff70\061\uff70\062\uff70\063\uff70\100\uff70\101\uff70" +
    "\102\uff70\110\uff70\111\uff70\112\uff70\113\uff70\131\uff70\132" +
    "\uff70\001\002\000\142\004\uff76\005\uff76\006\uff76\007\uff76" +
    "\010\uff76\012\uff76\014\uff76\015\uff76\016\uff76\022\uff76\023" +
    "\uff76\024\uff76\025\uff76\026\uff76\027\uff76\031\uff76\032\uff76" +
    "\033\uff76\034\uff76\035\uff76\036\uff76\037\uff76\040\uff76\041" +
    "\uff76\042\uff76\043\uff76\044\uff76\045\uff76\046\uff76\050\uff76" +
    "\053\uff76\054\uff76\055\uff76\056\uff76\057\uff76\060\uff76\061" +
    "\uff76\062\uff76\063\uff76\100\uff76\101\uff76\102\uff76\110\uff76" +
    "\111\uff76\112\uff76\113\uff76\131\uff76\132\uff76\001\002\000" +
    "\030\004\074\005\066\006\073\007\104\026\106\036\067" +
    "\037\103\054\072\055\101\131\105\132\100\001\002\000" +
    "\034\004\uffce\005\uffce\006\uffce\007\uffce\012\uffce\015\162" +
    "\026\uffce\036\uffce\037\uffce\054\uffce\055\uffce\131\uffce\132" +
    "\uffce\001\002\000\032\004\074\005\066\006\073\007\104" +
    "\012\uffd1\026\106\036\067\037\103\054\072\055\101\131" +
    "\105\132\100\001\002\000\142\004\uff72\005\uff72\006\uff72" +
    "\007\uff72\010\uff72\012\uff72\014\uff72\015\uff72\016\uff72\022" +
    "\uff72\023\uff72\024\uff72\025\uff72\026\uff72\027\uff72\031\uff72" +
    "\032\uff72\033\uff72\034\uff72\035\uff72\036\uff72\037\uff72\040" +
    "\uff72\041\uff72\042\uff72\043\uff72\044\uff72\045\uff72\046\uff72" +
    "\050\uff72\053\uff72\054\uff72\055\uff72\056\uff72\057\uff72\060" +
    "\uff72\061\uff72\062\uff72\063\uff72\100\uff72\101\uff72\102\uff72" +
    "\110\uff72\111\uff72\112\uff72\113\uff72\131\uff72\132\uff72\001" +
    "\002\000\150\004\uff74\005\uff74\006\uff74\007\uff74\010\uff74" +
    "\012\uff74\013\167\014\uff74\015\uff74\016\uff74\017\170\020" +
    "\166\022\uff74\023\uff74\024\uff74\025\uff74\026\uff74\027\uff74" +
    "\031\uff74\032\uff74\033\uff74\034\uff74\035\uff74\036\uff74\037" +
    "\uff74\040\uff74\041\uff74\042\uff74\043\uff74\044\uff74\045\uff74" +
    "\046\uff74\050\uff74\053\uff74\054\uff74\055\uff74\056\uff74\057" +
    "\uff74\060\uff74\061\uff74\062\uff74\063\uff74\100\uff74\101\uff74" +
    "\102\uff74\110\uff74\111\uff74\112\uff74\113\uff74\131\uff74\132" +
    "\uff74\001\002\000\142\004\uff75\005\uff75\006\uff75\007\uff75" +
    "\010\uff75\012\uff75\014\uff75\015\uff75\016\uff75\022\uff75\023" +
    "\uff75\024\uff75\025\uff75\026\uff75\027\uff75\031\uff75\032\uff75" +
    "\033\uff75\034\uff75\035\uff75\036\uff75\037\uff75\040\uff75\041" +
    "\uff75\042\uff75\043\uff75\044\uff75\045\uff75\046\uff75\050\uff75" +
    "\053\uff75\054\uff75\055\uff75\056\uff75\057\uff75\060\uff75\061" +
    "\uff75\062\uff75\063\uff75\100\uff75\101\uff75\102\uff75\110\uff75" +
    "\111\uff75\112\uff75\113\uff75\131\uff75\132\uff75\001\002\000" +
    "\030\004\074\005\066\006\073\007\104\026\106\036\067" +
    "\037\103\054\072\055\101\131\105\132\100\001\002\000" +
    "\074\004\uffca\005\uffca\006\uffca\007\uffca\012\uffca\015\uffca" +
    "\022\117\023\114\024\123\025\116\026\111\027\122\031" +
    "\112\032\127\033\130\034\125\035\110\036\uffca\037\uffca" +
    "\040\126\041\113\042\120\043\115\044\121\045\124\054" +
    "\uffca\055\uffca\131\uffca\132\uffca\001\002\000\006\012\uffd0" +
    "\015\156\001\002\000\142\004\uff77\005\uff77\006\uff77\007" +
    "\uff77\010\uff77\012\uff77\014\uff77\015\uff77\016\uff77\022\uff77" +
    "\023\uff77\024\uff77\025\uff77\026\uff77\027\uff77\031\uff77\032" +
    "\uff77\033\uff77\034\uff77\035\uff77\036\uff77\037\uff77\040\uff77" +
    "\041\uff77\042\uff77\043\uff77\044\uff77\045\uff77\046\uff77\050" +
    "\uff77\053\uff77\054\uff77\055\uff77\056\uff77\057\uff77\060\uff77" +
    "\061\uff77\062\uff77\063\uff77\100\uff77\101\uff77\102\uff77\110" +
    "\uff77\111\uff77\112\uff77\113\uff77\131\uff77\132\uff77\001\002" +
    "\000\142\004\uff71\005\uff71\006\uff71\007\uff71\010\uff71\012" +
    "\uff71\014\uff71\015\uff71\016\uff71\022\uff71\023\uff71\024\uff71" +
    "\025\uff71\026\uff71\027\uff71\031\uff71\032\uff71\033\uff71\034" +
    "\uff71\035\uff71\036\uff71\037\uff71\040\uff71\041\uff71\042\uff71" +
    "\043\uff71\044\uff71\045\uff71\046\uff71\050\uff71\053\uff71\054" +
    "\uff71\055\uff71\056\uff71\057\uff71\060\uff71\061\uff71\062\uff71" +
    "\063\uff71\100\uff71\101\uff71\102\uff71\110\uff71\111\uff71\112" +
    "\uff71\113\uff71\131\uff71\132\uff71\001\002\000\004\012\155" +
    "\001\002\000\030\004\074\005\066\006\073\007\104\026" +
    "\106\036\067\037\103\054\072\055\101\131\105\132\100" +
    "\001\002\000\030\004\074\005\066\006\073\007\104\026" +
    "\106\036\067\037\103\054\072\055\101\131\105\132\100" +
    "\001\002\000\142\004\uff78\005\uff78\006\uff78\007\uff78\010" +
    "\uff78\012\uff78\014\uff78\015\uff78\016\uff78\022\uff78\023\uff78" +
    "\024\uff78\025\uff78\026\uff78\027\uff78\031\uff78\032\uff78\033" +
    "\uff78\034\uff78\035\uff78\036\uff78\037\uff78\040\uff78\041\uff78" +
    "\042\uff78\043\uff78\044\uff78\045\uff78\046\uff78\050\uff78\053" +
    "\uff78\054\uff78\055\uff78\056\uff78\057\uff78\060\uff78\061\uff78" +
    "\062\uff78\063\uff78\100\uff78\101\uff78\102\uff78\110\uff78\111" +
    "\uff78\112\uff78\113\uff78\131\uff78\132\uff78\001\002\000\030" +
    "\004\074\005\066\006\073\007\104\026\106\036\067\037" +
    "\103\054\072\055\101\131\105\132\100\001\002\000\142" +
    "\004\uff7a\005\uff7a\006\uff7a\007\uff7a\010\uff7a\012\uff7a\014" +
    "\uff7a\015\uff7a\016\uff7a\022\117\023\114\024\123\025\116" +
    "\026\uff7a\027\uff7a\031\uff7a\032\uff7a\033\uff7a\034\125\035" +
    "\110\036\uff7a\037\uff7a\040\uff7a\041\uff7a\042\uff7a\043\uff7a" +
    "\044\uff7a\045\uff7a\046\uff7a\050\uff7a\053\uff7a\054\uff7a\055" +
    "\uff7a\056\uff7a\057\uff7a\060\uff7a\061\uff7a\062\uff7a\063\uff7a" +
    "\100\uff7a\101\uff7a\102\uff7a\110\uff7a\111\uff7a\112\uff7a\113" +
    "\uff7a\131\uff7a\132\uff7a\001\002\000\030\004\074\005\066" +
    "\006\073\007\104\026\106\036\067\037\103\054\072\055" +
    "\101\131\105\132\100\001\002\000\030\004\074\005\066" +
    "\006\073\007\104\026\106\036\067\037\103\054\072\055" +
    "\101\131\105\132\100\001\002\000\030\004\074\005\066" +
    "\006\073\007\104\026\106\036\067\037\103\054\072\055" +
    "\101\131\105\132\100\001\002\000\030\004\074\005\066" +
    "\006\073\007\104\026\106\036\067\037\103\054\072\055" +
    "\101\131\105\132\100\001\002\000\030\004\074\005\066" +
    "\006\073\007\104\026\106\036\067\037\103\054\072\055" +
    "\101\131\105\132\100\001\002\000\030\004\074\005\066" +
    "\006\073\007\104\026\106\036\067\037\103\054\072\055" +
    "\101\131\105\132\100\001\002\000\030\004\074\005\066" +
    "\006\073\007\104\026\106\036\067\037\103\054\072\055" +
    "\101\131\105\132\100\001\002\000\030\004\074\005\066" +
    "\006\073\007\104\026\106\036\067\037\103\054\072\055" +
    "\101\131\105\132\100\001\002\000\030\004\074\005\066" +
    "\006\073\007\104\026\106\036\067\037\103\054\072\055" +
    "\101\131\105\132\100\001\002\000\030\004\074\005\066" +
    "\006\073\007\104\026\106\036\067\037\103\054\072\055" +
    "\101\131\105\132\100\001\002\000\030\004\074\005\066" +
    "\006\073\007\104\026\106\036\067\037\103\054\072\055" +
    "\101\131\105\132\100\001\002\000\030\004\074\005\066" +
    "\006\073\007\104\026\106\036\067\037\103\054\072\055" +
    "\101\131\105\132\100\001\002\000\030\004\074\005\066" +
    "\006\073\007\104\026\106\036\067\037\103\054\072\055" +
    "\101\131\105\132\100\001\002\000\030\004\074\005\066" +
    "\006\073\007\104\026\106\036\067\037\103\054\072\055" +
    "\101\131\105\132\100\001\002\000\030\004\074\005\066" +
    "\006\073\007\104\026\106\036\067\037\103\054\072\055" +
    "\101\131\105\132\100\001\002\000\030\004\074\005\066" +
    "\006\073\007\104\026\106\036\067\037\103\054\072\055" +
    "\101\131\105\132\100\001\002\000\030\004\074\005\066" +
    "\006\073\007\104\026\106\036\067\037\103\054\072\055" +
    "\101\131\105\132\100\001\002\000\142\004\uff7f\005\uff7f" +
    "\006\uff7f\007\uff7f\010\uff7f\012\uff7f\014\uff7f\015\uff7f\016" +
    "\uff7f\022\117\023\114\024\123\025\116\026\111\027\122" +
    "\031\uff7f\032\uff7f\033\uff7f\034\125\035\110\036\uff7f\037" +
    "\uff7f\040\126\041\113\042\120\043\115\044\121\045\124" +
    "\046\uff7f\050\uff7f\053\uff7f\054\uff7f\055\uff7f\056\uff7f\057" +
    "\uff7f\060\uff7f\061\uff7f\062\uff7f\063\uff7f\100\uff7f\101\uff7f" +
    "\102\uff7f\110\uff7f\111\uff7f\112\uff7f\113\uff7f\131\uff7f\132" +
    "\uff7f\001\002\000\142\004\uff7e\005\uff7e\006\uff7e\007\uff7e" +
    "\010\uff7e\012\uff7e\014\uff7e\015\uff7e\016\uff7e\022\117\023" +
    "\114\024\123\025\116\026\111\027\122\031\uff7e\032\uff7e" +
    "\033\uff7e\034\125\035\110\036\uff7e\037\uff7e\040\126\041" +
    "\113\042\120\043\115\044\121\045\124\046\uff7e\050\uff7e" +
    "\053\uff7e\054\uff7e\055\uff7e\056\uff7e\057\uff7e\060\uff7e\061" +
    "\uff7e\062\uff7e\063\uff7e\100\uff7e\101\uff7e\102\uff7e\110\uff7e" +
    "\111\uff7e\112\uff7e\113\uff7e\131\uff7e\132\uff7e\001\002\000" +
    "\142\004\uff82\005\uff82\006\uff82\007\uff82\010\uff82\012\uff82" +
    "\014\uff82\015\uff82\016\uff82\022\117\023\114\024\123\025" +
    "\116\026\111\027\122\031\uff82\032\uff82\033\uff82\034\125" +
    "\035\110\036\uff82\037\uff82\040\uff82\041\uff82\042\uff82\043" +
    "\uff82\044\uff82\045\uff82\046\uff82\050\uff82\053\uff82\054\uff82" +
    "\055\uff82\056\uff82\057\uff82\060\uff82\061\uff82\062\uff82\063" +
    "\uff82\100\uff82\101\uff82\102\uff82\110\uff82\111\uff82\112\uff82" +
    "\113\uff82\131\uff82\132\uff82\001\002\000\142\004\uff80\005" +
    "\uff80\006\uff80\007\uff80\010\uff80\012\uff80\014\uff80\015\uff80" +
    "\016\uff80\022\uff80\023\114\024\uff80\025\uff80\026\uff80\027" +
    "\uff80\031\uff80\032\uff80\033\uff80\034\uff80\035\uff80\036\uff80" +
    "\037\uff80\040\uff80\041\uff80\042\uff80\043\uff80\044\uff80\045" +
    "\uff80\046\uff80\050\uff80\053\uff80\054\uff80\055\uff80\056\uff80" +
    "\057\uff80\060\uff80\061\uff80\062\uff80\063\uff80\100\uff80\101" +
    "\uff80\102\uff80\110\uff80\111\uff80\112\uff80\113\uff80\131\uff80" +
    "\132\uff80\001\002\000\142\004\uff87\005\uff87\006\uff87\007" +
    "\uff87\010\uff87\012\uff87\014\uff87\015\uff87\016\uff87\022\117" +
    "\023\114\024\123\025\116\026\111\027\122\031\uff87\032" +
    "\uff87\033\uff87\034\125\035\110\036\uff87\037\uff87\040\uff87" +
    "\041\uff87\042\uff87\043\uff87\044\uff87\045\uff87\046\uff87\050" +
    "\uff87\053\uff87\054\uff87\055\uff87\056\uff87\057\uff87\060\uff87" +
    "\061\uff87\062\uff87\063\uff87\100\uff87\101\uff87\102\uff87\110" +
    "\uff87\111\uff87\112\uff87\113\uff87\131\uff87\132\uff87\001\002" +
    "\000\142\004\uff8a\005\uff8a\006\uff8a\007\uff8a\010\uff8a\012" +
    "\uff8a\014\uff8a\015\uff8a\016\uff8a\022\uff8a\023\114\024\uff8a" +
    "\025\uff8a\026\uff8a\027\uff8a\031\uff8a\032\uff8a\033\uff8a\034" +
    "\uff8a\035\uff8a\036\uff8a\037\uff8a\040\uff8a\041\uff8a\042\uff8a" +
    "\043\uff8a\044\uff8a\045\uff8a\046\uff8a\050\uff8a\053\uff8a\054" +
    "\uff8a\055\uff8a\056\uff8a\057\uff8a\060\uff8a\061\uff8a\062\uff8a" +
    "\063\uff8a\100\uff8a\101\uff8a\102\uff8a\110\uff8a\111\uff8a\112" +
    "\uff8a\113\uff8a\131\uff8a\132\uff8a\001\002\000\142\004\uff8d" +
    "\005\uff8d\006\uff8d\007\uff8d\010\uff8d\012\uff8d\014\uff8d\015" +
    "\uff8d\016\uff8d\022\117\023\114\024\123\025\116\026\uff8d" +
    "\027\uff8d\031\uff8d\032\uff8d\033\uff8d\034\125\035\110\036" +
    "\uff8d\037\uff8d\040\uff8d\041\uff8d\042\uff8d\043\uff8d\044\uff8d" +
    "\045\uff8d\046\uff8d\050\uff8d\053\uff8d\054\uff8d\055\uff8d\056" +
    "\uff8d\057\uff8d\060\uff8d\061\uff8d\062\uff8d\063\uff8d\100\uff8d" +
    "\101\uff8d\102\uff8d\110\uff8d\111\uff8d\112\uff8d\113\uff8d\131" +
    "\uff8d\132\uff8d\001\002\000\142\004\uff86\005\uff86\006\uff86" +
    "\007\uff86\010\uff86\012\uff86\014\uff86\015\uff86\016\uff86\022" +
    "\117\023\114\024\123\025\116\026\111\027\122\031\uff86" +
    "\032\uff86\033\uff86\034\125\035\110\036\uff86\037\uff86\040" +
    "\uff86\041\uff86\042\uff86\043\uff86\044\uff86\045\uff86\046\uff86" +
    "\050\uff86\053\uff86\054\uff86\055\uff86\056\uff86\057\uff86\060" +
    "\uff86\061\uff86\062\uff86\063\uff86\100\uff86\101\uff86\102\uff86" +
    "\110\uff86\111\uff86\112\uff86\113\uff86\131\uff86\132\uff86\001" +
    "\002\000\142\004\uff84\005\uff84\006\uff84\007\uff84\010\uff84" +
    "\012\uff84\014\uff84\015\uff84\016\uff84\022\117\023\114\024" +
    "\123\025\116\026\111\027\122\031\uff84\032\uff84\033\uff84" +
    "\034\125\035\110\036\uff84\037\uff84\040\uff84\041\uff84\042" +
    "\uff84\043\uff84\044\uff84\045\uff84\046\uff84\050\uff84\053\uff84" +
    "\054\uff84\055\uff84\056\uff84\057\uff84\060\uff84\061\uff84\062" +
    "\uff84\063\uff84\100\uff84\101\uff84\102\uff84\110\uff84\111\uff84" +
    "\112\uff84\113\uff84\131\uff84\132\uff84\001\002\000\142\004" +
    "\uff89\005\uff89\006\uff89\007\uff89\010\uff89\012\uff89\014\uff89" +
    "\015\uff89\016\uff89\022\uff89\023\114\024\uff89\025\uff89\026" +
    "\uff89\027\uff89\031\uff89\032\uff89\033\uff89\034\uff89\035\uff89" +
    "\036\uff89\037\uff89\040\uff89\041\uff89\042\uff89\043\uff89\044" +
    "\uff89\045\uff89\046\uff89\050\uff89\053\uff89\054\uff89\055\uff89" +
    "\056\uff89\057\uff89\060\uff89\061\uff89\062\uff89\063\uff89\100" +
    "\uff89\101\uff89\102\uff89\110\uff89\111\uff89\112\uff89\113\uff89" +
    "\131\uff89\132\uff89\001\002\000\142\004\uff8b\005\uff8b\006" +
    "\uff8b\007\uff8b\010\uff8b\012\uff8b\014\uff8b\015\uff8b\016\uff8b" +
    "\022\uff8b\023\114\024\uff8b\025\uff8b\026\uff8b\027\uff8b\031" +
    "\uff8b\032\uff8b\033\uff8b\034\uff8b\035\uff8b\036\uff8b\037\uff8b" +
    "\040\uff8b\041\uff8b\042\uff8b\043\uff8b\044\uff8b\045\uff8b\046" +
    "\uff8b\050\uff8b\053\uff8b\054\uff8b\055\uff8b\056\uff8b\057\uff8b" +
    "\060\uff8b\061\uff8b\062\uff8b\063\uff8b\100\uff8b\101\uff8b\102" +
    "\uff8b\110\uff8b\111\uff8b\112\uff8b\113\uff8b\131\uff8b\132\uff8b" +
    "\001\002\000\142\004\uff85\005\uff85\006\uff85\007\uff85\010" +
    "\uff85\012\uff85\014\uff85\015\uff85\016\uff85\022\117\023\114" +
    "\024\123\025\116\026\111\027\122\031\uff85\032\uff85\033" +
    "\uff85\034\125\035\110\036\uff85\037\uff85\040\uff85\041\uff85" +
    "\042\uff85\043\uff85\044\uff85\045\uff85\046\uff85\050\uff85\053" +
    "\uff85\054\uff85\055\uff85\056\uff85\057\uff85\060\uff85\061\uff85" +
    "\062\uff85\063\uff85\100\uff85\101\uff85\102\uff85\110\uff85\111" +
    "\uff85\112\uff85\113\uff85\131\uff85\132\uff85\001\002\000\142" +
    "\004\uff88\005\uff88\006\uff88\007\uff88\010\uff88\012\uff88\014" +
    "\uff88\015\uff88\016\uff88\022\uff88\023\uff88\024\uff88\025\uff88" +
    "\026\uff88\027\uff88\031\uff88\032\uff88\033\uff88\034\uff88\035" +
    "\uff88\036\uff88\037\uff88\040\uff88\041\uff88\042\uff88\043\uff88" +
    "\044\uff88\045\uff88\046\uff88\050\uff88\053\uff88\054\uff88\055" +
    "\uff88\056\uff88\057\uff88\060\uff88\061\uff88\062\uff88\063\uff88" +
    "\100\uff88\101\uff88\102\uff88\110\uff88\111\uff88\112\uff88\113" +
    "\uff88\131\uff88\132\uff88\001\002\000\142\004\uff83\005\uff83" +
    "\006\uff83\007\uff83\010\uff83\012\uff83\014\uff83\015\uff83\016" +
    "\uff83\022\117\023\114\024\123\025\116\026\111\027\122" +
    "\031\uff83\032\uff83\033\uff83\034\125\035\110\036\uff83\037" +
    "\uff83\040\uff83\041\uff83\042\uff83\043\uff83\044\uff83\045\uff83" +
    "\046\uff83\050\uff83\053\uff83\054\uff83\055\uff83\056\uff83\057" +
    "\uff83\060\uff83\061\uff83\062\uff83\063\uff83\100\uff83\101\uff83" +
    "\102\uff83\110\uff83\111\uff83\112\uff83\113\uff83\131\uff83\132" +
    "\uff83\001\002\000\142\004\uff7d\005\uff7d\006\uff7d\007\uff7d" +
    "\010\uff7d\012\uff7d\014\uff7d\015\uff7d\016\uff7d\022\117\023" +
    "\114\024\123\025\116\026\111\027\122\031\uff7d\032\uff7d" +
    "\033\uff7d\034\125\035\110\036\uff7d\037\uff7d\040\126\041" +
    "\113\042\120\043\115\044\121\045\124\046\uff7d\050\uff7d" +
    "\053\uff7d\054\uff7d\055\uff7d\056\uff7d\057\uff7d\060\uff7d\061" +
    "\uff7d\062\uff7d\063\uff7d\100\uff7d\101\uff7d\102\uff7d\110\uff7d" +
    "\111\uff7d\112\uff7d\113\uff7d\131\uff7d\132\uff7d\001\002\000" +
    "\142\004\uff8c\005\uff8c\006\uff8c\007\uff8c\010\uff8c\012\uff8c" +
    "\014\uff8c\015\uff8c\016\uff8c\022\117\023\114\024\123\025" +
    "\116\026\uff8c\027\uff8c\031\uff8c\032\uff8c\033\uff8c\034\125" +
    "\035\110\036\uff8c\037\uff8c\040\uff8c\041\uff8c\042\uff8c\043" +
    "\uff8c\044\uff8c\045\uff8c\046\uff8c\050\uff8c\053\uff8c\054\uff8c" +
    "\055\uff8c\056\uff8c\057\uff8c\060\uff8c\061\uff8c\062\uff8c\063" +
    "\uff8c\100\uff8c\101\uff8c\102\uff8c\110\uff8c\111\uff8c\112\uff8c" +
    "\113\uff8c\131\uff8c\132\uff8c\001\002\000\142\004\uff81\005" +
    "\uff81\006\uff81\007\uff81\010\uff81\012\uff81\014\uff81\015\uff81" +
    "\016\uff81\022\uff81\023\114\024\uff81\025\uff81\026\uff81\027" +
    "\uff81\031\uff81\032\uff81\033\uff81\034\uff81\035\uff81\036\uff81" +
    "\037\uff81\040\uff81\041\uff81\042\uff81\043\uff81\044\uff81\045" +
    "\uff81\046\uff81\050\uff81\053\uff81\054\uff81\055\uff81\056\uff81" +
    "\057\uff81\060\uff81\061\uff81\062\uff81\063\uff81\100\uff81\101" +
    "\uff81\102\uff81\110\uff81\111\uff81\112\uff81\113\uff81\131\uff81" +
    "\132\uff81\001\002\000\046\010\153\022\117\023\114\024" +
    "\123\025\116\026\111\027\122\031\112\032\127\033\130" +
    "\034\125\035\110\040\126\041\113\042\120\043\115\044" +
    "\121\045\124\001\002\000\142\004\uff79\005\uff79\006\uff79" +
    "\007\uff79\010\uff79\012\uff79\014\uff79\015\uff79\016\uff79\022" +
    "\uff79\023\uff79\024\uff79\025\uff79\026\uff79\027\uff79\031\uff79" +
    "\032\uff79\033\uff79\034\uff79\035\uff79\036\uff79\037\uff79\040" +
    "\uff79\041\uff79\042\uff79\043\uff79\044\uff79\045\uff79\046\uff79" +
    "\050\uff79\053\uff79\054\uff79\055\uff79\056\uff79\057\uff79\060" +
    "\uff79\061\uff79\062\uff79\063\uff79\100\uff79\101\uff79\102\uff79" +
    "\110\uff79\111\uff79\112\uff79\113\uff79\131\uff79\132\uff79\001" +
    "\002\000\142\004\uff7c\005\uff7c\006\uff7c\007\uff7c\010\uff7c" +
    "\012\uff7c\014\uff7c\015\uff7c\016\uff7c\022\uff7c\023\uff7c\024" +
    "\uff7c\025\uff7c\026\uff7c\027\uff7c\031\uff7c\032\uff7c\033\uff7c" +
    "\034\uff7c\035\uff7c\036\uff7c\037\uff7c\040\uff7c\041\uff7c\042" +
    "\uff7c\043\uff7c\044\uff7c\045\uff7c\046\uff7c\050\uff7c\053\uff7c" +
    "\054\uff7c\055\uff7c\056\uff7c\057\uff7c\060\uff7c\061\uff7c\062" +
    "\uff7c\063\uff7c\100\uff7c\101\uff7c\102\uff7c\110\uff7c\111\uff7c" +
    "\112\uff7c\113\uff7c\131\uff7c\132\uff7c\001\002\000\044\006" +
    "\uffdd\046\uffdd\050\uffdd\053\uffdd\056\uffdd\057\uffdd\060\uffdd" +
    "\061\uffdd\062\uffdd\063\uffdd\100\uffdd\101\uffdd\102\uffdd\110" +
    "\uffdd\111\uffdd\112\uffdd\113\uffdd\001\002\000\004\011\157" +
    "\001\002\000\030\004\074\005\066\006\073\007\104\026" +
    "\106\036\067\037\103\054\072\055\101\131\105\132\100" +
    "\001\002\000\006\012\161\015\162\001\002\000\006\012" +
    "\uffcd\015\uffcd\001\002\000\030\004\074\005\066\006\073" +
    "\007\104\026\106\036\067\037\103\054\072\055\101\131" +
    "\105\132\100\001\002\000\074\004\uffcb\005\uffcb\006\uffcb" +
    "\007\uffcb\012\uffcb\015\uffcb\022\117\023\114\024\123\025" +
    "\116\026\111\027\122\031\112\032\127\033\130\034\125" +
    "\035\110\036\uffcb\037\uffcb\040\126\041\113\042\120\043" +
    "\115\044\121\045\124\054\uffcb\055\uffcb\131\uffcb\132\uffcb" +
    "\001\002\000\006\012\165\015\162\001\002\000\006\012" +
    "\uffcc\015\uffcc\001\002\000\142\004\uffb4\005\uffb4\006\uffb4" +
    "\007\uffb4\010\uffb4\012\uffb4\014\uffb4\015\uffb4\016\uffb4\022" +
    "\uffb4\023\uffb4\024\uffb4\025\uffb4\026\uffb4\027\uffb4\031\uffb4" +
    "\032\uffb4\033\uffb4\034\uffb4\035\uffb4\036\uffb4\037\uffb4\040" +
    "\uffb4\041\uffb4\042\uffb4\043\uffb4\044\uffb4\045\uffb4\046\uffb4" +
    "\050\uffb4\053\uffb4\054\uffb4\055\uffb4\056\uffb4\057\uffb4\060" +
    "\uffb4\061\uffb4\062\uffb4\063\uffb4\100\uffb4\101\uffb4\102\uffb4" +
    "\110\uffb4\111\uffb4\112\uffb4\113\uffb4\131\uffb4\132\uffb4\001" +
    "\002\000\030\004\074\005\066\006\073\007\104\026\106" +
    "\036\067\037\103\054\072\055\101\131\105\132\100\001" +
    "\002\000\142\004\uffb3\005\uffb3\006\uffb3\007\uffb3\010\uffb3" +
    "\012\uffb3\014\uffb3\015\uffb3\016\uffb3\022\uffb3\023\uffb3\024" +
    "\uffb3\025\uffb3\026\uffb3\027\uffb3\031\uffb3\032\uffb3\033\uffb3" +
    "\034\uffb3\035\uffb3\036\uffb3\037\uffb3\040\uffb3\041\uffb3\042" +
    "\uffb3\043\uffb3\044\uffb3\045\uffb3\046\uffb3\050\uffb3\053\uffb3" +
    "\054\uffb3\055\uffb3\056\uffb3\057\uffb3\060\uffb3\061\uffb3\062" +
    "\uffb3\063\uffb3\100\uffb3\101\uffb3\102\uffb3\110\uffb3\111\uffb3" +
    "\112\uffb3\113\uffb3\131\uffb3\132\uffb3\001\002\000\144\004" +
    "\uff73\005\uff73\006\uff73\007\uff73\010\uff73\012\uff73\013\172" +
    "\014\uff73\015\uff73\016\uff73\022\uff73\023\uff73\024\uff73\025" +
    "\uff73\026\uff73\027\uff73\031\uff73\032\uff73\033\uff73\034\uff73" +
    "\035\uff73\036\uff73\037\uff73\040\uff73\041\uff73\042\uff73\043" +
    "\uff73\044\uff73\045\uff73\046\uff73\050\uff73\053\uff73\054\uff73" +
    "\055\uff73\056\uff73\057\uff73\060\uff73\061\uff73\062\uff73\063" +
    "\uff73\100\uff73\101\uff73\102\uff73\110\uff73\111\uff73\112\uff73" +
    "\113\uff73\131\uff73\132\uff73\001\002\000\030\004\074\005" +
    "\066\006\073\007\104\026\106\036\067\037\103\054\072" +
    "\055\101\131\105\132\100\001\002\000\046\014\174\022" +
    "\117\023\114\024\123\025\116\026\111\027\122\031\112" +
    "\032\127\033\130\034\125\035\110\040\126\041\113\042" +
    "\120\043\115\044\121\045\124\001\002\000\146\004\uffd3" +
    "\005\uffd3\006\uffd3\007\uffd3\010\uffd3\012\uffd3\013\uffd3\014" +
    "\uffd3\015\uffd3\016\uffd3\022\uffd3\023\uffd3\024\uffd3\025\uffd3" +
    "\026\uffd3\027\uffd3\030\uffd3\031\uffd3\032\uffd3\033\uffd3\034" +
    "\uffd3\035\uffd3\036\uffd3\037\uffd3\040\uffd3\041\uffd3\042\uffd3" +
    "\043\uffd3\044\uffd3\045\uffd3\046\uffd3\050\uffd3\053\uffd3\054" +
    "\uffd3\055\uffd3\056\uffd3\057\uffd3\060\uffd3\061\uffd3\062\uffd3" +
    "\063\uffd3\100\uffd3\101\uffd3\102\uffd3\110\uffd3\111\uffd3\112" +
    "\uffd3\113\uffd3\131\uffd3\132\uffd3\001\002\000\046\014\176" +
    "\022\117\023\114\024\123\025\116\026\111\027\122\031" +
    "\112\032\127\033\130\034\125\035\110\040\126\041\113" +
    "\042\120\043\115\044\121\045\124\001\002\000\146\004" +
    "\uffd2\005\uffd2\006\uffd2\007\uffd2\010\uffd2\012\uffd2\013\uffd2" +
    "\014\uffd2\015\uffd2\016\uffd2\022\uffd2\023\uffd2\024\uffd2\025" +
    "\uffd2\026\uffd2\027\uffd2\030\uffd2\031\uffd2\032\uffd2\033\uffd2" +
    "\034\uffd2\035\uffd2\036\uffd2\037\uffd2\040\uffd2\041\uffd2\042" +
    "\uffd2\043\uffd2\044\uffd2\045\uffd2\046\uffd2\050\uffd2\053\uffd2" +
    "\054\uffd2\055\uffd2\056\uffd2\057\uffd2\060\uffd2\061\uffd2\062" +
    "\uffd2\063\uffd2\100\uffd2\101\uffd2\102\uffd2\110\uffd2\111\uffd2" +
    "\112\uffd2\113\uffd2\131\uffd2\132\uffd2\001\002\000\034\004" +
    "\uffcf\005\uffcf\006\uffcf\007\uffcf\012\uffcf\015\162\026\uffcf" +
    "\036\uffcf\037\uffcf\054\uffcf\055\uffcf\131\uffcf\132\uffcf\001" +
    "\002\000\142\004\uff7b\005\uff7b\006\uff7b\007\uff7b\010\uff7b" +
    "\012\uff7b\014\uff7b\015\uff7b\016\uff7b\022\uff7b\023\uff7b\024" +
    "\uff7b\025\uff7b\026\uff7b\027\uff7b\031\uff7b\032\uff7b\033\uff7b" +
    "\034\uff7b\035\uff7b\036\uff7b\037\uff7b\040\uff7b\041\uff7b\042" +
    "\uff7b\043\uff7b\044\uff7b\045\uff7b\046\uff7b\050\uff7b\053\uff7b" +
    "\054\uff7b\055\uff7b\056\uff7b\057\uff7b\060\uff7b\061\uff7b\062" +
    "\uff7b\063\uff7b\100\uff7b\101\uff7b\102\uff7b\110\uff7b\111\uff7b" +
    "\112\uff7b\113\uff7b\131\uff7b\132\uff7b\001\002\000\004\013" +
    "\167\001\002\000\052\006\uffd7\013\172\015\uffd7\030\uffd7" +
    "\046\uffd7\050\uffd7\053\uffd7\056\uffd7\057\uffd7\060\uffd7\061" +
    "\uffd7\062\uffd7\063\uffd7\100\uffd7\101\uffd7\102\uffd7\110\uffd7" +
    "\111\uffd7\112\uffd7\113\uffd7\001\002\000\052\006\uffd6\013" +
    "\172\015\uffd6\030\uffd6\046\uffd6\050\uffd6\053\uffd6\056\uffd6" +
    "\057\uffd6\060\uffd6\061\uffd6\062\uffd6\063\uffd6\100\uffd6\101" +
    "\uffd6\102\uffd6\110\uffd6\111\uffd6\112\uffd6\113\uffd6\001\002" +
    "\000\004\006\207\001\002\000\030\004\074\005\066\006" +
    "\073\007\104\026\106\036\067\037\103\054\072\055\101" +
    "\131\105\132\100\001\002\000\106\006\uffe0\022\117\023" +
    "\114\024\123\025\116\026\111\027\122\031\112\032\127" +
    "\033\130\034\125\035\110\040\126\041\113\042\120\043" +
    "\115\044\121\045\124\046\uffe0\050\uffe0\053\uffe0\056\uffe0" +
    "\057\uffe0\060\uffe0\061\uffe0\062\uffe0\063\uffe0\100\uffe0\101" +
    "\uffe0\102\uffe0\110\uffe0\111\uffe0\112\uffe0\113\uffe0\001\002" +
    "\000\050\006\uffd5\015\uffd5\030\uffd5\046\uffd5\050\uffd5\053" +
    "\uffd5\056\uffd5\057\uffd5\060\uffd5\061\uffd5\062\uffd5\063\uffd5" +
    "\100\uffd5\101\uffd5\102\uffd5\110\uffd5\111\uffd5\112\uffd5\113" +
    "\uffd5\001\002\000\016\010\213\057\032\060\053\061\046" +
    "\062\034\063\042\001\002\000\006\010\217\015\216\001" +
    "\002\000\004\006\215\001\002\000\004\050\021\001\002" +
    "\000\044\006\uffaa\046\uffaa\050\uffaa\053\uffaa\056\uffaa\057" +
    "\uffaa\060\uffaa\061\uffaa\062\uffaa\063\uffaa\100\uffaa\101\uffaa" +
    "\102\uffaa\110\uffaa\111\uffaa\112\uffaa\113\uffaa\001\002\000" +
    "\006\010\uff9c\015\uff9c\001\002\000\014\057\032\060\053" +
    "\061\046\062\034\063\042\001\002\000\004\050\021\001" +
    "\002\000\044\006\uffa9\046\uffa9\050\uffa9\053\uffa9\056\uffa9" +
    "\057\uffa9\060\uffa9\061\uffa9\062\uffa9\063\uffa9\100\uffa9\101" +
    "\uffa9\102\uffa9\110\uffa9\111\uffa9\112\uffa9\113\uffa9\001\002" +
    "\000\004\006\222\001\002\000\006\010\uff9d\015\uff9d\001" +
    "\002\000\004\010\224\001\002\000\004\050\021\001\002" +
    "\000\044\006\uffc1\046\uffc1\050\uffc1\053\uffc1\056\uffc1\057" +
    "\uffc1\060\uffc1\061\uffc1\062\uffc1\063\uffc1\100\uffc1\101\uffc1" +
    "\102\uffc1\110\uffc1\111\uffc1\112\uffc1\113\uffc1\001\002\000" +
    "\044\006\ufff9\046\ufff9\050\ufff9\053\ufff9\056\ufff9\057\ufff9" +
    "\060\ufff9\061\ufff9\062\ufff9\063\ufff9\100\ufff9\101\ufff9\102" +
    "\ufff9\110\ufff9\111\ufff9\112\ufff9\113\ufff9\001\002\000\006" +
    "\002\uffe4\051\uffe4\001\002\000\020\006\041\100\033\101" +
    "\050\102\037\110\035\111\026\112\052\001\002\000\014" +
    "\057\032\060\053\061\046\062\034\063\042\001\002\000" +
    "\004\007\237\001\002\000\004\007\234\001\002\000\004" +
    "\010\235\001\002\000\004\050\021\001\002\000\044\006" +
    "\uffc0\046\uffc0\050\uffc0\053\uffc0\056\uffc0\057\uffc0\060\uffc0" +
    "\061\uffc0\062\uffc0\063\uffc0\100\uffc0\101\uffc0\102\uffc0\110" +
    "\uffc0\111\uffc0\112\uffc0\113\uffc0\001\002\000\016\010\241" +
    "\057\032\060\053\061\046\062\034\063\042\001\002\000" +
    "\006\010\243\015\216\001\002\000\004\050\021\001\002" +
    "\000\044\006\uffa6\046\uffa6\050\uffa6\053\uffa6\056\uffa6\057" +
    "\uffa6\060\uffa6\061\uffa6\062\uffa6\063\uffa6\100\uffa6\101\uffa6" +
    "\102\uffa6\110\uffa6\111\uffa6\112\uffa6\113\uffa6\001\002\000" +
    "\004\050\021\001\002\000\044\006\uffa5\046\uffa5\050\uffa5" +
    "\053\uffa5\056\uffa5\057\uffa5\060\uffa5\061\uffa5\062\uffa5\063" +
    "\uffa5\100\uffa5\101\uffa5\102\uffa5\110\uffa5\111\uffa5\112\uffa5" +
    "\113\uffa5\001\002\000\006\006\055\064\247\001\002\000" +
    "\050\006\uffda\015\204\030\255\046\uffda\050\uffda\053\uffda" +
    "\056\uffda\057\uffda\060\uffda\061\uffda\062\uffda\063\uffda\100" +
    "\uffda\101\uffda\102\uffda\110\uffda\111\uffda\112\uffda\113\uffda" +
    "\001\002\000\004\006\060\001\002\000\050\006\uffd9\015" +
    "\062\030\251\046\uffd9\050\uffd9\053\uffd9\056\uffd9\057\uffd9" +
    "\060\uffd9\061\uffd9\062\uffd9\063\uffd9\100\uffd9\101\uffd9\102" +
    "\uffd9\110\uffd9\111\uffd9\112\uffd9\113\uffd9\001\002\000\004" +
    "\011\252\001\002\000\032\004\074\005\066\006\073\007" +
    "\104\011\075\026\106\036\067\037\103\054\072\055\101" +
    "\131\105\132\100\001\002\000\004\012\254\001\002\000" +
    "\044\006\uffd8\046\uffd8\050\uffd8\053\uffd8\056\uffd8\057\uffd8" +
    "\060\uffd8\061\uffd8\062\uffd8\063\uffd8\100\uffd8\101\uffd8\102" +
    "\uffd8\110\uffd8\111\uffd8\112\uffd8\113\uffd8\001\002\000\030" +
    "\004\074\005\066\006\073\007\104\026\106\036\067\037" +
    "\103\054\072\055\101\131\105\132\100\001\002\000\106" +
    "\006\uffdb\022\117\023\114\024\123\025\116\026\111\027" +
    "\122\031\112\032\127\033\130\034\125\035\110\040\126" +
    "\041\113\042\120\043\115\044\121\045\124\046\uffdb\050" +
    "\uffdb\053\uffdb\056\uffdb\057\uffdb\060\uffdb\061\uffdb\062\uffdb" +
    "\063\uffdb\100\uffdb\101\uffdb\102\uffdb\110\uffdb\111\uffdb\112" +
    "\uffdb\113\uffdb\001\002\000\004\007\260\001\002\000\016" +
    "\010\262\057\032\060\053\061\046\062\034\063\042\001" +
    "\002\000\006\010\264\015\216\001\002\000\004\050\021" +
    "\001\002\000\044\006\uffa8\046\uffa8\050\uffa8\053\uffa8\056" +
    "\uffa8\057\uffa8\060\uffa8\061\uffa8\062\uffa8\063\uffa8\100\uffa8" +
    "\101\uffa8\102\uffa8\110\uffa8\111\uffa8\112\uffa8\113\uffa8\001" +
    "\002\000\004\050\021\001\002\000\044\006\uffa7\046\uffa7" +
    "\050\uffa7\053\uffa7\056\uffa7\057\uffa7\060\uffa7\061\uffa7\062" +
    "\uffa7\063\uffa7\100\uffa7\101\uffa7\102\uffa7\110\uffa7\111\uffa7" +
    "\112\uffa7\113\uffa7\001\002\000\004\007\267\001\002\000" +
    "\016\010\271\057\032\060\053\061\046\062\034\063\042" +
    "\001\002\000\006\010\273\015\216\001\002\000\004\050" +
    "\021\001\002\000\044\006\uffac\046\uffac\050\uffac\053\uffac" +
    "\056\uffac\057\uffac\060\uffac\061\uffac\062\uffac\063\uffac\100" +
    "\uffac\101\uffac\102\uffac\110\uffac\111\uffac\112\uffac\113\uffac" +
    "\001\002\000\004\050\021\001\002\000\044\006\uffab\046" +
    "\uffab\050\uffab\053\uffab\056\uffab\057\uffab\060\uffab\061\uffab" +
    "\062\uffab\063\uffab\100\uffab\101\uffab\102\uffab\110\uffab\111" +
    "\uffab\112\uffab\113\uffab\001\002\000\076\002\uffe1\006\uffe1" +
    "\046\uffe1\050\uffe1\051\uffe1\053\uffe1\056\uffe1\057\uffe1\060" +
    "\uffe1\061\uffe1\062\uffe1\063\uffe1\065\uffe1\066\uffe1\067\uffe1" +
    "\070\uffe1\071\uffe1\072\uffe1\073\uffe1\074\uffe1\075\uffe1\076" +
    "\uffe1\077\uffe1\100\uffe1\101\uffe1\102\uffe1\110\uffe1\111\uffe1" +
    "\112\uffe1\113\uffe1\001\002\000\030\006\311\050\315\056" +
    "\047\065\317\067\307\072\310\073\305\074\322\075\301" +
    "\076\312\077\306\001\002\000\004\050\u0128\001\002\000" +
    "\032\006\uffee\046\uffee\050\uffee\056\uffee\065\uffee\067\uffee" +
    "\072\uffee\073\uffee\074\uffee\075\uffee\076\uffee\077\uffee\001" +
    "\002\000\004\050\u0127\001\002\000\004\050\u0126\001\002" +
    "\000\004\050\u0125\001\002\000\032\006\311\046\u0123\050" +
    "\315\056\047\065\317\067\307\072\310\073\305\074\322" +
    "\075\301\076\312\077\306\001\002\000\004\007\u011f\001" +
    "\002\000\030\004\074\005\066\006\073\007\104\026\106" +
    "\036\067\037\103\054\072\055\101\131\105\132\100\001" +
    "\002\000\004\007\u0110\001\002\000\004\007\365\001\002" +
    "\000\014\013\167\017\170\020\166\021\357\030\356\001" +
    "\002\000\004\050\355\001\002\000\032\006\uffeb\046\uffeb" +
    "\050\uffeb\056\uffeb\065\uffeb\067\uffeb\072\uffeb\073\uffeb\074" +
    "\uffeb\075\uffeb\076\uffeb\077\uffeb\001\002\000\032\006\uffed" +
    "\046\uffed\050\uffed\056\uffed\065\uffed\067\uffed\072\uffed\073" +
    "\uffed\074\uffed\075\uffed\076\uffed\077\uffed\001\002\000\032" +
    "\006\uffe5\046\uffe5\050\uffe5\056\uffe5\065\uffe5\067\uffe5\072" +
    "\uffe5\073\uffe5\074\uffe5\075\uffe5\076\uffe5\077\uffe5\001\002" +
    "\000\032\006\uffec\046\uffec\050\uffec\056\uffec\065\uffec\067" +
    "\uffec\072\uffec\073\uffec\074\uffec\075\uffec\076\uffec\077\uffec" +
    "\001\002\000\004\007\331\001\002\000\032\006\uffea\046" +
    "\uffea\050\uffea\056\uffea\065\uffea\067\uffea\072\uffea\073\uffea" +
    "\074\uffea\075\uffea\076\uffea\077\uffea\001\002\000\032\006" +
    "\ufff1\046\ufff1\050\ufff1\056\ufff1\065\ufff1\067\ufff1\072\ufff1" +
    "\073\ufff1\074\ufff1\075\ufff1\076\ufff1\077\ufff1\001\002\000" +
    "\004\050\021\001\002\000\004\073\324\001\002\000\004" +
    "\007\325\001\002\000\030\004\074\005\066\006\073\007" +
    "\104\026\106\036\067\037\103\054\072\055\101\131\105" +
    "\132\100\001\002\000\046\010\327\022\117\023\114\024" +
    "\123\025\116\026\111\027\122\031\112\032\127\033\130" +
    "\034\125\035\110\040\126\041\113\042\120\043\115\044" +
    "\121\045\124\001\002\000\004\050\330\001\002\000\032" +
    "\006\uffb1\046\uffb1\050\uffb1\056\uffb1\065\uffb1\067\uffb1\072" +
    "\uffb1\073\uffb1\074\uffb1\075\uffb1\076\uffb1\077\uffb1\001\002" +
    "\000\030\004\074\005\066\006\073\007\104\026\106\036" +
    "\067\037\103\054\072\055\101\131\105\132\100\001\002" +
    "\000\046\010\333\022\117\023\114\024\123\025\116\026" +
    "\111\027\122\031\112\032\127\033\130\034\125\035\110" +
    "\040\126\041\113\042\120\043\115\044\121\045\124\001" +
    "\002\000\004\050\021\001\002\000\034\006\uffbf\046\uffbf" +
    "\050\uffbf\056\uffbf\065\uffbf\066\336\067\uffbf\072\uffbf\073" +
    "\uffbf\074\uffbf\075\uffbf\076\uffbf\077\uffbf\001\002\000\032" +
    "\006\uffbe\046\uffbe\050\uffbe\056\uffbe\065\uffbe\067\uffbe\072" +
    "\uffbe\073\uffbe\074\uffbe\075\uffbe\076\uffbe\077\uffbe\001\002" +
    "\000\006\050\021\065\350\001\002\000\034\006\uffbd\046" +
    "\uffbd\050\uffbd\056\uffbd\065\uffbd\066\341\067\uffbd\072\uffbd" +
    "\073\uffbd\074\uffbd\075\uffbd\076\uffbd\077\uffbd\001\002\000" +
    "\032\006\uffbc\046\uffbc\050\uffbc\056\uffbc\065\uffbc\067\uffbc" +
    "\072\uffbc\073\uffbc\074\uffbc\075\uffbc\076\uffbc\077\uffbc\001" +
    "\002\000\006\050\021\065\342\001\002\000\004\007\344" +
    "\001\002\000\032\006\uffbb\046\uffbb\050\uffbb\056\uffbb\065" +
    "\uffbb\067\uffbb\072\uffbb\073\uffbb\074\uffbb\075\uffbb\076\uffbb" +
    "\077\uffbb\001\002\000\030\004\074\005\066\006\073\007" +
    "\104\026\106\036\067\037\103\054\072\055\101\131\105" +
    "\132\100\001\002\000\046\010\346\022\117\023\114\024" +
    "\123\025\116\026\111\027\122\031\112\032\127\033\130" +
    "\034\125\035\110\040\126\041\113\042\120\043\115\044" +
    "\121\045\124\001\002\000\004\050\021\001\002\000\034" +
    "\006\uffba\046\uffba\050\uffba\056\uffba\065\uffba\066\uffba\067" +
    "\uffba\072\uffba\073\uffba\074\uffba\075\uffba\076\uffba\077\uffba" +
    "\001\002\000\004\007\351\001\002\000\030\004\074\005" +
    "\066\006\073\007\104\026\106\036\067\037\103\054\072" +
    "\055\101\131\105\132\100\001\002\000\046\010\353\022" +
    "\117\023\114\024\123\025\116\026\111\027\122\031\112" +
    "\032\127\033\130\034\125\035\110\040\126\041\113\042" +
    "\120\043\115\044\121\045\124\001\002\000\004\050\021" +
    "\001\002\000\034\006\uffb9\046\uffb9\050\uffb9\056\uffb9\065" +
    "\uffb9\066\uffb9\067\uffb9\072\uffb9\073\uffb9\074\uffb9\075\uffb9" +
    "\076\uffb9\077\uffb9\001\002\000\032\006\uffe8\046\uffe8\050" +
    "\uffe8\056\uffe8\065\uffe8\067\uffe8\072\uffe8\073\uffe8\074\uffe8" +
    "\075\uffe8\076\uffe8\077\uffe8\001\002\000\030\004\074\005" +
    "\066\006\073\007\104\026\106\036\067\037\103\054\072" +
    "\055\101\131\105\132\100\001\002\000\030\004\074\005" +
    "\066\006\073\007\104\026\106\036\067\037\103\054\072" +
    "\055\101\131\105\132\100\001\002\000\006\013\172\030" +
    "\361\001\002\000\030\004\074\005\066\006\073\007\104" +
    "\026\106\036\067\037\103\054\072\055\101\131\105\132" +
    "\100\001\002\000\052\010\uffc2\016\uffc2\022\117\023\114" +
    "\024\123\025\116\026\111\027\122\031\112\032\127\033" +
    "\130\034\125\035\110\040\126\041\113\042\120\043\115" +
    "\044\121\045\124\050\uffc2\001\002\000\052\010\uffc3\016" +
    "\uffc3\022\117\023\114\024\123\025\116\026\111\027\122" +
    "\031\112\032\127\033\130\034\125\035\110\040\126\041" +
    "\113\042\120\043\115\044\121\045\124\050\uffc3\001\002" +
    "\000\052\010\uffc4\016\uffc4\022\117\023\114\024\123\025" +
    "\116\026\111\027\122\031\112\032\127\033\130\034\125" +
    "\035\110\040\126\041\113\042\120\043\115\044\121\045" +
    "\124\050\uffc4\001\002\000\006\006\367\056\366\001\002" +
    "\000\014\057\032\060\053\061\046\062\034\063\042\001" +
    "\002\000\010\013\167\021\357\030\356\001\002\000\004" +
    "\016\u0103\001\002\000\004\016\372\001\002\000\030\004" +
    "\074\005\066\006\073\007\104\026\106\036\067\037\103" +
    "\054\072\055\101\131\105\132\100\001\002\000\046\016" +
    "\374\022\117\023\114\024\123\025\116\026\111\027\122" +
    "\031\112\032\127\033\130\034\125\035\110\040\126\041" +
    "\113\042\120\043\115\044\121\045\124\001\002\000\004" +
    "\006\311\001\002\000\004\010\u0101\001\002\000\004\010" +
    "\377\001\002\000\004\050\021\001\002\000\032\006\uffb8" +
    "\046\uffb8\050\uffb8\056\uffb8\065\uffb8\067\uffb8\072\uffb8\073" +
    "\uffb8\074\uffb8\075\uffb8\076\uffb8\077\uffb8\001\002\000\004" +
    "\050\021\001\002\000\032\006\uffb7\046\uffb7\050\uffb7\056" +
    "\uffb7\065\uffb7\067\uffb7\072\uffb7\073\uffb7\074\uffb7\075\uffb7" +
    "\076\uffb7\077\uffb7\001\002\000\030\004\074\005\066\006" +
    "\073\007\104\026\106\036\067\037\103\054\072\055\101" +
    "\131\105\132\100\001\002\000\046\016\u0105\022\117\023" +
    "\114\024\123\025\116\026\111\027\122\031\112\032\127" +
    "\033\130\034\125\035\110\040\126\041\113\042\120\043" +
    "\115\044\121\045\124\001\002\000\004\006\311\001\002" +
    "\000\004\010\u010a\001\002\000\004\010\u0108\001\002\000" +
    "\004\050\021\001\002\000\032\006\uffb6\046\uffb6\050\uffb6" +
    "\056\uffb6\065\uffb6\067\uffb6\072\uffb6\073\uffb6\074\uffb6\075" +
    "\uffb6\076\uffb6\077\uffb6\001\002\000\004\050\021\001\002" +
    "\000\032\006\uffb5\046\uffb5\050\uffb5\056\uffb5\065\uffb5\067" +
    "\uffb5\072\uffb5\073\uffb5\074\uffb5\075\uffb5\076\uffb5\077\uffb5" +
    "\001\002\000\004\006\u010d\001\002\000\004\030\u010e\001" +
    "\002\000\030\004\074\005\066\006\073\007\104\026\106" +
    "\036\067\037\103\054\072\055\101\131\105\132\100\001" +
    "\002\000\046\016\uffdc\022\117\023\114\024\123\025\116" +
    "\026\111\027\122\031\112\032\127\033\130\034\125\035" +
    "\110\040\126\041\113\042\120\043\115\044\121\045\124" +
    "\001\002\000\030\004\074\005\066\006\073\007\104\026" +
    "\106\036\067\037\103\054\072\055\101\131\105\132\100" +
    "\001\002\000\046\010\u0112\022\117\023\114\024\123\025" +
    "\116\026\111\027\122\031\112\032\127\033\130\034\125" +
    "\035\110\040\126\041\113\042\120\043\115\044\121\045" +
    "\124\001\002\000\004\050\u0113\001\002\000\004\070\u0115" +
    "\001\002\000\036\006\uffb0\046\uffb0\050\uffb0\056\uffb0\065" +
    "\uffb0\067\uffb0\070\u0119\071\u0118\072\uffb0\073\uffb0\074\uffb0" +
    "\075\uffb0\076\uffb0\077\uffb0\001\002\000\030\004\074\005" +
    "\066\006\073\007\104\026\106\036\067\037\103\054\072" +
    "\055\101\131\105\132\100\001\002\000\046\022\117\023" +
    "\114\024\123\025\116\026\111\027\122\031\112\032\127" +
    "\033\130\034\125\035\110\040\126\041\113\042\120\043" +
    "\115\044\121\045\124\050\021\001\002\000\036\006\uffad" +
    "\046\uffad\050\uffad\056\uffad\065\uffad\067\uffad\070\uffad\071" +
    "\uffad\072\uffad\073\uffad\074\uffad\075\uffad\076\uffad\077\uffad" +
    "\001\002\000\004\050\021\001\002\000\030\004\074\005" +
    "\066\006\073\007\104\026\106\036\067\037\103\054\072" +
    "\055\101\131\105\132\100\001\002\000\046\022\117\023" +
    "\114\024\123\025\116\026\111\027\122\031\112\032\127" +
    "\033\130\034\125\035\110\040\126\041\113\042\120\043" +
    "\115\044\121\045\124\050\021\001\002\000\036\006\uffaf" +
    "\046\uffaf\050\uffaf\056\uffaf\065\uffaf\067\uffaf\070\uffaf\071" +
    "\uffaf\072\uffaf\073\uffaf\074\uffaf\075\uffaf\076\uffaf\077\uffaf" +
    "\001\002\000\036\006\uffae\046\uffae\050\uffae\056\uffae\065" +
    "\uffae\067\uffae\070\uffae\071\uffae\072\uffae\073\uffae\074\uffae" +
    "\075\uffae\076\uffae\077\uffae\001\002\000\046\022\117\023" +
    "\114\024\123\025\116\026\111\027\122\031\112\032\127" +
    "\033\130\034\125\035\110\040\126\041\113\042\120\043" +
    "\115\044\121\045\124\050\u011e\001\002\000\032\006\uffe7" +
    "\046\uffe7\050\uffe7\056\uffe7\065\uffe7\067\uffe7\072\uffe7\073" +
    "\uffe7\074\uffe7\075\uffe7\076\uffe7\077\uffe7\001\002\000\030" +
    "\004\074\005\066\006\073\007\104\026\106\036\067\037" +
    "\103\054\072\055\101\131\105\132\100\001\002\000\046" +
    "\010\u0121\022\117\023\114\024\123\025\116\026\111\027" +
    "\122\031\112\032\127\033\130\034\125\035\110\040\126" +
    "\041\113\042\120\043\115\044\121\045\124\001\002\000" +
    "\004\050\021\001\002\000\032\006\uffb2\046\uffb2\050\uffb2" +
    "\056\uffb2\065\uffb2\067\uffb2\072\uffb2\073\uffb2\074\uffb2\075" +
    "\uffb2\076\uffb2\077\uffb2\001\002\000\076\002\uffe2\006\uffe2" +
    "\046\uffe2\050\uffe2\051\uffe2\053\uffe2\056\uffe2\057\uffe2\060" +
    "\uffe2\061\uffe2\062\uffe2\063\uffe2\065\uffe2\066\uffe2\067\uffe2" +
    "\070\uffe2\071\uffe2\072\uffe2\073\uffe2\074\uffe2\075\uffe2\076" +
    "\uffe2\077\uffe2\100\uffe2\101\uffe2\102\uffe2\110\uffe2\111\uffe2" +
    "\112\uffe2\113\uffe2\001\002\000\032\006\ufff2\046\ufff2\050" +
    "\ufff2\056\ufff2\065\ufff2\067\ufff2\072\ufff2\073\ufff2\074\ufff2" +
    "\075\ufff2\076\ufff2\077\ufff2\001\002\000\032\006\uffe6\046" +
    "\uffe6\050\uffe6\056\uffe6\065\uffe6\067\uffe6\072\uffe6\073\uffe6" +
    "\074\uffe6\075\uffe6\076\uffe6\077\uffe6\001\002\000\032\006" +
    "\uffef\046\uffef\050\uffef\056\uffef\065\uffef\067\uffef\072\uffef" +
    "\073\uffef\074\uffef\075\uffef\076\uffef\077\uffef\001\002\000" +
    "\032\006\uffe9\046\uffe9\050\uffe9\056\uffe9\065\uffe9\067\uffe9" +
    "\072\uffe9\073\uffe9\074\uffe9\075\uffe9\076\uffe9\077\uffe9\001" +
    "\002\000\032\006\ufff0\046\ufff0\050\ufff0\056\ufff0\065\ufff0" +
    "\067\ufff0\072\ufff0\073\ufff0\074\ufff0\075\ufff0\076\ufff0\077" +
    "\ufff0\001\002\000\006\002\uffff\051\uffff\001\002\000\004" +
    "\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0128\000\010\002\003\003\004\010\006\001\001\000" +
    "\002\001\001\000\004\010\u0128\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\007\010\001\001\000\002\001" +
    "\001\000\004\006\021\001\001\000\004\011\014\001\001" +
    "\000\002\001\001\000\004\007\016\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\006\274" +
    "\001\001\000\002\001\001\000\022\004\030\013\026\015" +
    "\023\017\037\026\024\030\050\044\035\045\044\001\001" +
    "\000\002\001\001\000\004\045\265\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\026\227\045\231\001\001" +
    "\000\020\013\225\015\023\017\037\026\024\030\050\044" +
    "\035\045\044\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\026\053\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\012\055\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\020\060\001\001\000\004\021\202\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\022\067\023\101\024\070\025\076\040\064\041" +
    "\075\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\040\064\041\177\001\001\000\002\001\001\000\010\022" +
    "\176\040\064\041\075\001\001\000\002\001\001\000\004" +
    "\021\170\001\001\000\002\001\001\000\010\022\163\040" +
    "\064\041\075\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\040\064\041\153\001\001\000\006\040\064\041\151" +
    "\001\001\000\002\001\001\000\006\040\064\041\106\001" +
    "\001\000\002\001\001\000\006\040\064\041\150\001\001" +
    "\000\006\040\064\041\147\001\001\000\006\040\064\041" +
    "\146\001\001\000\006\040\064\041\145\001\001\000\006" +
    "\040\064\041\144\001\001\000\006\040\064\041\143\001" +
    "\001\000\006\040\064\041\142\001\001\000\006\040\064" +
    "\041\141\001\001\000\006\040\064\041\140\001\001\000" +
    "\006\040\064\041\137\001\001\000\006\040\064\041\136" +
    "\001\001\000\006\040\064\041\135\001\001\000\006\040" +
    "\064\041\134\001\001\000\006\040\064\041\133\001\001" +
    "\000\006\040\064\041\132\001\001\000\006\040\064\041" +
    "\131\001\001\000\006\040\064\041\130\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\022\157\040" +
    "\064\041\075\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\040\064\041\162\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\040\064\041\174\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\040\064\041\172\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\021\201\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\040\064\041\205\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\026\211\046\210\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\006\213\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\026\220\001\001\000" +
    "\004\006\217\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\006\224\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\045\256\001\001\000\004\026\244\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\006\235\001\001\000\002\001\001\000\006\026\211\046" +
    "\237\001\001\000\002\001\001\000\004\006\241\001\001" +
    "\000\002\001\001\000\004\006\243\001\001\000\002\001" +
    "\001\000\004\012\245\001\001\000\002\001\001\000\004" +
    "\020\247\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\022\067\023\252\024\070\025\076\040\064\041\075" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\040" +
    "\064\041\255\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\026\211\046\260\001\001\000\002\001\001\000" +
    "\004\006\262\001\001\000\002\001\001\000\004\006\264" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\026" +
    "\211\046\267\001\001\000\002\001\001\000\004\006\271" +
    "\001\001\000\002\001\001\000\004\006\273\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\005\303\014\320" +
    "\015\276\027\301\031\277\034\313\035\315\036\312\037" +
    "\317\040\302\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\014\u0123\015\276\027\301\031\277\034\313\035\315" +
    "\036\312\037\317\040\302\001\001\000\002\001\001\000" +
    "\006\040\064\041\u011c\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\021\357\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\006\322\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\040\064\041\325\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\040\064" +
    "\041\331\001\001\000\002\001\001\000\004\006\333\001" +
    "\001\000\006\032\334\033\336\001\001\000\002\001\001" +
    "\000\004\006\342\001\001\000\004\032\337\001\001\000" +
    "\002\001\001\000\004\006\342\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\040\064\041\344\001\001\000" +
    "\002\001\001\000\004\006\346\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\040\064\041\351\001\001\000" +
    "\002\001\001\000\004\006\353\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\040\064\041\363\001\001\000" +
    "\006\040\064\041\362\001\001\000\002\001\001\000\006" +
    "\040\064\041\361\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\016\367\027\370\001\001" +
    "\000\004\026\u010b\001\001\000\004\021\357\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\040\064\041\372" +
    "\001\001\000\002\001\001\000\006\027\375\040\374\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\006\377" +
    "\001\001\000\002\001\001\000\004\006\u0101\001\001\000" +
    "\002\001\001\000\006\040\064\041\u0103\001\001\000\002" +
    "\001\001\000\006\027\u0106\040\u0105\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\006\u0108\001\001\000\002" +
    "\001\001\000\004\006\u010a\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\040\064\041\u010e" +
    "\001\001\000\002\001\001\000\006\040\064\041\u0110\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\042\u0113" +
    "\001\001\000\002\001\001\000\006\040\064\041\u0115\001" +
    "\001\000\004\006\u0116\001\001\000\002\001\001\000\004" +
    "\006\u011b\001\001\000\006\040\064\041\u0119\001\001\000" +
    "\004\006\u011a\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\040\064\041" +
    "\u011f\001\001\000\002\001\001\000\004\006\u0121\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MusicParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MusicParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MusicParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public  LinkedList<Instruction> AST;
    private LinkedList<GlobalError> errors;

    public MusicParser(MusicLexer lexer, LinkedList<GlobalError> errors) {
        super(lexer);
        this.errors = errors;
    }

    public void syntax_error(Symbol symbol) {
        System.out.println("error sintactico en: " + symbol.sym);
        //GlobalError error = new GlobalError("pintura", "sintactico", (String)symbol.value, "No se esperaba el elemento: ", symbol.right,(symbol.left - 1));
        //errors.add(error);
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception { 
        System.err.println("Error sintactico irrecuperable en la Linea " + (s.left) + " Columna "+s.right+". Componente " + s.value + " no reconocido."); 
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$MusicParser$actions {
  private final MusicParser parser;

  /** Constructor */
  CUP$MusicParser$actions(MusicParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$MusicParser$do_action_part00000000(
    int                        CUP$MusicParser$act_num,
    java_cup.runtime.lr_parser CUP$MusicParser$parser,
    java.util.Stack            CUP$MusicParser$stack,
    int                        CUP$MusicParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MusicParser$result;

      /* select the action based on the action number */
      switch (CUP$MusicParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= starting EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)).value;
		RESULT = start_val;
              CUP$MusicParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)), ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$MusicParser$parser.done_parsing();
          return CUP$MusicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // starting ::= blocks 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).right;
		LinkedList<Instruction> i = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$MusicParser$stack.peek()).value;
		 AST = i; 
              CUP$MusicParser$result = parser.getSymbolFactory().newSymbol("starting",0, ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), RESULT);
            }
          return CUP$MusicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // blocks ::= blocks track_block 
            {
              LinkedList<Instruction> RESULT =null;
		int blleft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)).left;
		int blright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)).right;
		LinkedList<Instruction> bl = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).right;
		Track b = (Track)((java_cup.runtime.Symbol) CUP$MusicParser$stack.peek()).value;
		 RESULT = bl; 
              RESULT.add(b); 
           
              CUP$MusicParser$result = parser.getSymbolFactory().newSymbol("blocks",1, ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)), ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), RESULT);
            }
          return CUP$MusicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // blocks ::= track_block 
            {
              LinkedList<Instruction> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).right;
		Track b = (Track)((java_cup.runtime.Symbol) CUP$MusicParser$stack.peek()).value;
		 RESULT = new LinkedList<>(); 
              RESULT.add(b); 
           
              CUP$MusicParser$result = parser.getSymbolFactory().newSymbol("blocks",1, ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), RESULT);
            }
          return CUP$MusicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // track_block ::= PISTA ID EXT ext_list p_block 
            {
              Track RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-3)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)).right;
		LinkedList<String> el = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).right;
		LinkedList<Instruction> ins = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$MusicParser$stack.peek()).value;
		 RESULT = new Track(i, iright, ileft-1, el, ins); 
              CUP$MusicParser$result = parser.getSymbolFactory().newSymbol("track_block",6, ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-4)), ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), RESULT);
            }
          return CUP$MusicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // track_block ::= PISTA ID p_block 
            {
              Track RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).right;
		LinkedList<Instruction> ins = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$MusicParser$stack.peek()).value;
		 RESULT = new Track(i, iright, ileft-1, ins); 
              CUP$MusicParser$result = parser.getSymbolFactory().newSymbol("track_block",6, ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-2)), ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), RESULT);
            }
          return CUP$MusicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ext_list ::= ext_list COMMA ID 
            {
              LinkedList<String> RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-2)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-2)).right;
		LinkedList<String> el = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$MusicParser$stack.peek()).value;
		 RESULT = el; RESULT.add(i); 
              CUP$MusicParser$result = parser.getSymbolFactory().newSymbol("ext_list",7, ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-2)), ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), RESULT);
            }
          return CUP$MusicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ext_list ::= ID 
            {
              LinkedList<String> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$MusicParser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(i); 
              CUP$MusicParser$result = parser.getSymbolFactory().newSymbol("ext_list",7, ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), RESULT);
            }
          return CUP$MusicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // main_instructions ::= main_instructions m_instruction 
            {
              LinkedList<Instruction> RESULT =null;
		int illeft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)).right;
		LinkedList<Instruction> il = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).right;
		Instruction i = (Instruction)((java_cup.runtime.Symbol) CUP$MusicParser$stack.peek()).value;
		 RESULT = il; RESULT.add(i); 
              CUP$MusicParser$result = parser.getSymbolFactory().newSymbol("main_instructions",2, ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)), ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), RESULT);
            }
          return CUP$MusicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // main_instructions ::= m_instruction 
            {
              LinkedList<Instruction> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).right;
		Instruction i = (Instruction)((java_cup.runtime.Symbol) CUP$MusicParser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(i); 
              CUP$MusicParser$result = parser.getSymbolFactory().newSymbol("main_instructions",2, ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), RESULT);
            }
          return CUP$MusicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // m_instruction ::= declaration 
            {
              Instruction RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).right;
		Declaration d = (Declaration)((java_cup.runtime.Symbol) CUP$MusicParser$stack.peek()).value;
		 RESULT = d; 
              CUP$MusicParser$result = parser.getSymbolFactory().newSymbol("m_instruction",9, ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), RESULT);
            }
          return CUP$MusicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // m_instruction ::= k_declaration 
            {
              Instruction RESULT =null;
		int kdleft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).left;
		int kdright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).right;
		Declaration kd = (Declaration)((java_cup.runtime.Symbol) CUP$MusicParser$stack.peek()).value;
		 RESULT = kd; 
              CUP$MusicParser$result = parser.getSymbolFactory().newSymbol("m_instruction",9, ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), RESULT);
            }
          return CUP$MusicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // m_instruction ::= function 
            {
              Instruction RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).right;
		Function f = (Function)((java_cup.runtime.Symbol) CUP$MusicParser$stack.peek()).value;
		 RESULT = f; 
              CUP$MusicParser$result = parser.getSymbolFactory().newSymbol("m_instruction",9, ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), RESULT);
            }
          return CUP$MusicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // m_instruction ::= principal_function 
            {
              Instruction RESULT =null;
		int pfleft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).left;
		int pfright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).right;
		PrincipalFunction pf = (PrincipalFunction)((java_cup.runtime.Symbol) CUP$MusicParser$stack.peek()).value;
		 RESULT = pf; 
              CUP$MusicParser$result = parser.getSymbolFactory().newSymbol("m_instruction",9, ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), RESULT);
            }
          return CUP$MusicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // m_instruction ::= SL 
            {
              Instruction RESULT =null;

              CUP$MusicParser$result = parser.getSymbolFactory().newSymbol("m_instruction",9, ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), RESULT);
            }
          return CUP$MusicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // instructions ::= instructions instruction 
            {
              LinkedList<Instruction> RESULT =null;
		int illeft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)).right;
		LinkedList<Instruction> il = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).right;
		Instruction i = (Instruction)((java_cup.runtime.Symbol) CUP$MusicParser$stack.peek()).value;
		 RESULT = il; RESULT.add(i); 
              CUP$MusicParser$result = parser.getSymbolFactory().newSymbol("instructions",3, ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)), ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), RESULT);
            }
          return CUP$MusicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // instructions ::= instruction 
            {
              LinkedList<Instruction> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).right;
		Instruction i = (Instruction)((java_cup.runtime.Symbol) CUP$MusicParser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(i); 
              CUP$MusicParser$result = parser.getSymbolFactory().newSymbol("instructions",3, ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), RESULT);
            }
          return CUP$MusicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // instruction ::= declaration SL 
            {
              Instruction RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)).right;
		Declaration d = (Declaration)((java_cup.runtime.Symbol) CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)).value;
		 RESULT = d; 
              CUP$MusicParser$result = parser.getSymbolFactory().newSymbol("instruction",10, ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)), ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), RESULT);
            }
          return CUP$MusicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // instruction ::= assignation SL 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)).right;
		Assignation a = (Assignation)((java_cup.runtime.Symbol) CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)).value;
		 RESULT = a; 
              CUP$MusicParser$result = parser.getSymbolFactory().newSymbol("instruction",10, ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)), ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), RESULT);
            }
          return CUP$MusicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // instruction ::= if_ins 
            {
              Instruction RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).right;
		If i = (If)((java_cup.runtime.Symbol) CUP$MusicParser$stack.peek()).value;
		 RESULT = i; 
              CUP$MusicParser$result = parser.getSymbolFactory().newSymbol("instruction",10, ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), RESULT);
            }
          return CUP$MusicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // instruction ::= for_ins 
            {
              Instruction RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).right;
		For f = (For)((java_cup.runtime.Symbol) CUP$MusicParser$stack.peek()).value;
		 RESULT = f; 
              CUP$MusicParser$result = parser.getSymbolFactory().newSymbol("instruction",10, ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), RESULT);
            }
          return CUP$MusicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // instruction ::= while_ins 
            {
              Instruction RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).right;
		While w = (While)((java_cup.runtime.Symbol) CUP$MusicParser$stack.peek()).value;
		 RESULT = w; 
              CUP$MusicParser$result = parser.getSymbolFactory().newSymbol("instruction",10, ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), RESULT);
            }
          return CUP$MusicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // instruction ::= do_while 
            {
              Instruction RESULT =null;
		int dwleft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).left;
		int dwright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).right;
		DoWhile dw = (DoWhile)((java_cup.runtime.Symbol) CUP$MusicParser$stack.peek()).value;
		 RESULT = dw; 
              CUP$MusicParser$result = parser.getSymbolFactory().newSymbol("instruction",10, ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), RESULT);
            }
          return CUP$MusicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // instruction ::= switch_ins 
            {
              Instruction RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).right;
		Switch s = (Switch)((java_cup.runtime.Symbol) CUP$MusicParser$stack.peek()).value;
		 RESULT = s; 
              CUP$MusicParser$result = parser.getSymbolFactory().newSymbol("instruction",10, ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), RESULT);
            }
          return CUP$MusicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // instruction ::= SALIR SL 
            {
              Instruction RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)).value;
		 RESULT = new Break(sright, sleft-1); 
              CUP$MusicParser$result = parser.getSymbolFactory().newSymbol("instruction",10, ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)), ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), RESULT);
            }
          return CUP$MusicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // instruction ::= CONT SL 
            {
              Instruction RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)).value;
		 RESULT = new Continue(cright, cleft-1); 
              CUP$MusicParser$result = parser.getSymbolFactory().newSymbol("instruction",10, ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)), ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), RESULT);
            }
          return CUP$MusicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // instruction ::= RETURN expression SL 
            {
              Instruction RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-2)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)).value;
		 RESULT = new Return(e,rright, rleft-1); 
              CUP$MusicParser$result = parser.getSymbolFactory().newSymbol("instruction",10, ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-2)), ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), RESULT);
            }
          return CUP$MusicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // instruction ::= inc_dec SL 
            {
              Instruction RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)).right;
		Expression r = (Expression)((java_cup.runtime.Symbol) CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)).value;
		 RESULT = r; 
              CUP$MusicParser$result = parser.getSymbolFactory().newSymbol("instruction",10, ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)), ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), RESULT);
            }
          return CUP$MusicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // instruction ::= SL 
            {
              Instruction RESULT =null;

              CUP$MusicParser$result = parser.getSymbolFactory().newSymbol("instruction",10, ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), RESULT);
            }
          return CUP$MusicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // p_block ::= SL INDENT main_instructions DEDENT 
            {
              LinkedList<Instruction> RESULT =null;
		int illeft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)).right;
		LinkedList<Instruction> il = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)).value;
		 RESULT = il; 
              CUP$MusicParser$result = parser.getSymbolFactory().newSymbol("p_block",5, ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-3)), ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), RESULT);
            }
          return CUP$MusicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // p_block ::= SL block 
            {
              LinkedList<Instruction> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).right;
		LinkedList<Instruction> b = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$MusicParser$stack.peek()).value;
		 RESULT = b; 
              CUP$MusicParser$result = parser.getSymbolFactory().newSymbol("p_block",5, ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)), ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), RESULT);
            }
          return CUP$MusicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // block ::= SL INDENT instructions DEDENT 
            {
              LinkedList<Instruction> RESULT =null;
		int illeft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)).right;
		LinkedList<Instruction> il = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)).value;
		 RESULT = il; 
              CUP$MusicParser$result = parser.getSymbolFactory().newSymbol("block",4, ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-3)), ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), RESULT);
            }
          return CUP$MusicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // block ::= SL block 
            {
              LinkedList<Instruction> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).right;
		LinkedList<Instruction> b = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$MusicParser$stack.peek()).value;
		 RESULT = b; 
              CUP$MusicParser$result = parser.getSymbolFactory().newSymbol("block",4, ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)), ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), RESULT);
            }
          return CUP$MusicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // declaration ::= VAR d_type d_list EQ expression 
            {
              Declaration RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-4)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-4)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-4)).value;
		int dtleft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-3)).left;
		int dtright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-3)).right;
		EnumType dt = (EnumType)((java_cup.runtime.Symbol) CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-3)).value;
		int dlleft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-2)).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-2)).right;
		LinkedList<String> dl = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$MusicParser$stack.peek()).value;
		 RESULT = new Declaration(dt, dl, e, vright, vleft-1, false); 
              CUP$MusicParser$result = parser.getSymbolFactory().newSymbol("declaration",11, ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-4)), ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), RESULT);
            }
          return CUP$MusicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // declaration ::= VAR d_type d_list 
            {
              Declaration RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-2)).value;
		int dtleft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)).left;
		int dtright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)).right;
		EnumType dt = (EnumType)((java_cup.runtime.Symbol) CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)).value;
		int dlleft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).right;
		LinkedList<String> dl = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$MusicParser$stack.peek()).value;
		 RESULT = new Declaration(dt, dl, null, vright, vleft-1, false); 
              CUP$MusicParser$result = parser.getSymbolFactory().newSymbol("declaration",11, ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-2)), ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), RESULT);
            }
          return CUP$MusicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // declaration ::= VAR d_type ARR array_id 
            {
              Declaration RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-3)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-3)).value;
		int dtleft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-2)).left;
		int dtright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-2)).right;
		EnumType dt = (EnumType)((java_cup.runtime.Symbol) CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-2)).value;
		int alleft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).left;
		int alright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).right;
		LinkedList<Array> al = (LinkedList<Array>)((java_cup.runtime.Symbol) CUP$MusicParser$stack.peek()).value;
		 RESULT = new Declaration(dt, al, null, vright, vleft-1, false); 
              CUP$MusicParser$result = parser.getSymbolFactory().newSymbol("declaration",11, ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-3)), ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), RESULT);
            }
          return CUP$MusicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // declaration ::= VAR d_type ARR array_id EQ LLA a_options LLC 
            {
              Declaration RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-7)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-7)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-7)).value;
		int dtleft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-6)).left;
		int dtright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-6)).right;
		EnumType dt = (EnumType)((java_cup.runtime.Symbol) CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-6)).value;
		int alleft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-4)).left;
		int alright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-4)).right;
		LinkedList<Array> al = (LinkedList<Array>)((java_cup.runtime.Symbol) CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-4)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)).right;
		LinkedList<LinkedList> el = (LinkedList<LinkedList>)((java_cup.runtime.Symbol) CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)).value;
		 RESULT = new Declaration(dt, al, el, vright, vleft-1, false); 
              CUP$MusicParser$result = parser.getSymbolFactory().newSymbol("declaration",11, ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-7)), ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), RESULT);
            }
          return CUP$MusicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // dec_simple ::= VAR d_type ID EQ expression 
            {
              Declaration RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-4)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-4)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-4)).value;
		int dtleft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-3)).left;
		int dtright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-3)).right;
		EnumType dt = (EnumType)((java_cup.runtime.Symbol) CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$MusicParser$stack.peek()).value;
		 RESULT = new Declaration(dt, i, e, vright, vleft-1, false); 
              CUP$MusicParser$result = parser.getSymbolFactory().newSymbol("dec_simple",12, ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-4)), ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), RESULT);
            }
          return CUP$MusicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // k_declaration ::= KEEP VAR d_type d_list EQ expression 
            {
              Declaration RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-5)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-5)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-5)).value;
		int dtleft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-3)).left;
		int dtright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-3)).right;
		EnumType dt = (EnumType)((java_cup.runtime.Symbol) CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-3)).value;
		int dlleft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-2)).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-2)).right;
		LinkedList<String> dl = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$MusicParser$stack.peek()).value;
		 RESULT = new Declaration(dt, dl, e, kright, kleft-1, true); 
              CUP$MusicParser$result = parser.getSymbolFactory().newSymbol("k_declaration",13, ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-5)), ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), RESULT);
            }
          return CUP$MusicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // k_declaration ::= KEEP VAR d_type d_list 
            {
              Declaration RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-3)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-3)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-3)).value;
		int dtleft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)).left;
		int dtright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)).right;
		EnumType dt = (EnumType)((java_cup.runtime.Symbol) CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)).value;
		int dlleft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).right;
		LinkedList<String> dl = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$MusicParser$stack.peek()).value;
		 RESULT = new Declaration(dt, dl, null, kright, kleft-1, true); 
              CUP$MusicParser$result = parser.getSymbolFactory().newSymbol("k_declaration",13, ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-3)), ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), RESULT);
            }
          return CUP$MusicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // k_declaration ::= KEEP VAR d_type ARR array_id 
            {
              Declaration RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-4)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-4)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-4)).value;
		int dtleft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-2)).left;
		int dtright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-2)).right;
		EnumType dt = (EnumType)((java_cup.runtime.Symbol) CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-2)).value;
		int alleft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).left;
		int alright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).right;
		LinkedList<Array> al = (LinkedList<Array>)((java_cup.runtime.Symbol) CUP$MusicParser$stack.peek()).value;
		 RESULT = new Declaration(dt, al, null, kright, kleft-1, true); 
              CUP$MusicParser$result = parser.getSymbolFactory().newSymbol("k_declaration",13, ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-4)), ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), RESULT);
            }
          return CUP$MusicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // k_declaration ::= KEEP VAR d_type ARR array_id EQ LLA a_options LLC 
            {
              Declaration RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-8)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-8)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-8)).value;
		int dtleft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-6)).left;
		int dtright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-6)).right;
		EnumType dt = (EnumType)((java_cup.runtime.Symbol) CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-6)).value;
		int alleft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-4)).left;
		int alright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-4)).right;
		LinkedList<Array> al = (LinkedList<Array>)((java_cup.runtime.Symbol) CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-4)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)).right;
		LinkedList<LinkedList> el = (LinkedList<LinkedList>)((java_cup.runtime.Symbol) CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)).value;
		 RESULT = new Declaration(dt, al, el, kright, kleft-1, true); 
              CUP$MusicParser$result = parser.getSymbolFactory().newSymbol("k_declaration",13, ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-8)), ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), RESULT);
            }
          return CUP$MusicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // array_id ::= array_id COMMA ID dimension_list 
            {
              LinkedList<Array> RESULT =null;
		int illeft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-3)).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-3)).right;
		LinkedList<Array> il = (LinkedList<Array>)((java_cup.runtime.Symbol) CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)).value;
		int dlleft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).right;
		LinkedList<Expression> dl = (LinkedList<Expression>)((java_cup.runtime.Symbol) CUP$MusicParser$stack.peek()).value;
		 RESULT = il; RESULT.add(new Array(iright, ileft-1, i, dl)); 
              CUP$MusicParser$result = parser.getSymbolFactory().newSymbol("array_id",14, ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-3)), ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), RESULT);
            }
          return CUP$MusicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // array_id ::= ID dimension_list 
            {
              LinkedList<Array> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)).value;
		int dlleft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).right;
		LinkedList<Expression> dl = (LinkedList<Expression>)((java_cup.runtime.Symbol) CUP$MusicParser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(new Array(iright, ileft-1, i, dl)); 
              CUP$MusicParser$result = parser.getSymbolFactory().newSymbol("array_id",14, ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)), ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), RESULT);
            }
          return CUP$MusicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // d_list ::= d_list COMMA ID 
            {
              LinkedList<String> RESULT =null;
		int illeft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-2)).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-2)).right;
		LinkedList<String> il = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$MusicParser$stack.peek()).value;
		 RESULT = il; RESULT.add(id); 
              CUP$MusicParser$result = parser.getSymbolFactory().newSymbol("d_list",8, ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-2)), ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), RESULT);
            }
          return CUP$MusicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // d_list ::= ID 
            {
              LinkedList<String> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$MusicParser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(id); 
              CUP$MusicParser$result = parser.getSymbolFactory().newSymbol("d_list",8, ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), RESULT);
            }
          return CUP$MusicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // dimension_list ::= dimension_list CA expression CC 
            {
              LinkedList<Expression> RESULT =null;
		int dlleft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-3)).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-3)).right;
		LinkedList<Expression> dl = (LinkedList<Expression>)((java_cup.runtime.Symbol) CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)).value;
		 RESULT = dl; RESULT.add(e); 
              CUP$MusicParser$result = parser.getSymbolFactory().newSymbol("dimension_list",15, ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-3)), ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), RESULT);
            }
          return CUP$MusicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // dimension_list ::= CA expression CC 
            {
              LinkedList<Expression> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)).value;
		 RESULT = new LinkedList<>(); RESULT.add(e); 
              CUP$MusicParser$result = parser.getSymbolFactory().newSymbol("dimension_list",15, ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-2)), ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), RESULT);
            }
          return CUP$MusicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // a_options ::= array_assignation 
            {
              LinkedList<LinkedList> RESULT =null;
		int lleleft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).left;
		int lleright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).right;
		LinkedList<LinkedList> lle = (LinkedList<LinkedList>)((java_cup.runtime.Symbol) CUP$MusicParser$stack.peek()).value;
		 RESULT = lle; 
              CUP$MusicParser$result = parser.getSymbolFactory().newSymbol("a_options",17, ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), RESULT);
            }
          return CUP$MusicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // a_options ::= nested_cb 
            {
              LinkedList<LinkedList> RESULT =null;
		int lleleft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).left;
		int lleright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).right;
		LinkedList<LinkedList> lle = (LinkedList<LinkedList>)((java_cup.runtime.Symbol) CUP$MusicParser$stack.peek()).value;
		 RESULT = lle; 
              CUP$MusicParser$result = parser.getSymbolFactory().newSymbol("a_options",17, ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), RESULT);
            }
          return CUP$MusicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // array_assignation ::= array_assignation a_list 
            {
              LinkedList<LinkedList> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)).right;
		LinkedList<LinkedList> a = (LinkedList<LinkedList>)((java_cup.runtime.Symbol) CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)).value;
		int alleft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).left;
		int alright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).right;
		LinkedList<Expression> al = (LinkedList<Expression>)((java_cup.runtime.Symbol) CUP$MusicParser$stack.peek()).value;
		 RESULT = a; RESULT.add(al); 
              CUP$MusicParser$result = parser.getSymbolFactory().newSymbol("array_assignation",18, ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)), ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), RESULT);
            }
          return CUP$MusicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // array_assignation ::= a_list 
            {
              LinkedList<LinkedList> RESULT =null;
		int alleft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).left;
		int alright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).right;
		LinkedList<Expression> al = (LinkedList<Expression>)((java_cup.runtime.Symbol) CUP$MusicParser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(al); 
              CUP$MusicParser$result = parser.getSymbolFactory().newSymbol("array_assignation",18, ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), RESULT);
            }
          return CUP$MusicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // nested_cb ::= nested_cb COMMA LLA a_list LLC 
            {
              LinkedList<LinkedList> RESULT =null;
		int nlleft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-4)).left;
		int nlright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-4)).right;
		LinkedList<LinkedList> nl = (LinkedList<LinkedList>)((java_cup.runtime.Symbol) CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-4)).value;
		int alleft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)).left;
		int alright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)).right;
		LinkedList<Expression> al = (LinkedList<Expression>)((java_cup.runtime.Symbol) CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)).value;
		 RESULT = nl; RESULT.add(al); 
              CUP$MusicParser$result = parser.getSymbolFactory().newSymbol("nested_cb",19, ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-4)), ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), RESULT);
            }
          return CUP$MusicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // nested_cb ::= LLA a_list LLC 
            {
              LinkedList<LinkedList> RESULT =null;
		int alleft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)).left;
		int alright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)).right;
		LinkedList<Expression> al = (LinkedList<Expression>)((java_cup.runtime.Symbol) CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)).value;
		 RESULT = new LinkedList<>(); RESULT.add(al); 
              CUP$MusicParser$result = parser.getSymbolFactory().newSymbol("nested_cb",19, ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-2)), ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), RESULT);
            }
          return CUP$MusicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // a_list ::= a_list COMMA expression 
            {
              LinkedList<Expression> RESULT =null;
		int alleft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-2)).left;
		int alright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-2)).right;
		LinkedList<Expression> al = (LinkedList<Expression>)((java_cup.runtime.Symbol) CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$MusicParser$stack.peek()).value;
		 RESULT = al; RESULT.add(e); 
              CUP$MusicParser$result = parser.getSymbolFactory().newSymbol("a_list",16, ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-2)), ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), RESULT);
            }
          return CUP$MusicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // a_list ::= expression 
            {
              LinkedList<Expression> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$MusicParser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(e); 
              CUP$MusicParser$result = parser.getSymbolFactory().newSymbol("a_list",16, ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), RESULT);
            }
          return CUP$MusicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // d_type ::= INT 
            {
              EnumType RESULT =null;
		 RESULT = EnumType.entero; 
              CUP$MusicParser$result = parser.getSymbolFactory().newSymbol("d_type",20, ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), RESULT);
            }
          return CUP$MusicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // d_type ::= DOUBLE 
            {
              EnumType RESULT =null;
		 RESULT = EnumType.doble; 
              CUP$MusicParser$result = parser.getSymbolFactory().newSymbol("d_type",20, ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), RESULT);
            }
          return CUP$MusicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // d_type ::= BOOL 
            {
              EnumType RESULT =null;
		 RESULT = EnumType.booleano; 
              CUP$MusicParser$result = parser.getSymbolFactory().newSymbol("d_type",20, ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), RESULT);
            }
          return CUP$MusicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // d_type ::= CHAR 
            {
              EnumType RESULT =null;
		 RESULT = EnumType.caracter; 
              CUP$MusicParser$result = parser.getSymbolFactory().newSymbol("d_type",20, ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), RESULT);
            }
          return CUP$MusicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // d_type ::= STRING 
            {
              EnumType RESULT =null;
		 RESULT = EnumType.cadena; 
              CUP$MusicParser$result = parser.getSymbolFactory().newSymbol("d_type",20, ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), RESULT);
            }
          return CUP$MusicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // assignation ::= ID EQ expression 
            {
              Assignation RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$MusicParser$stack.peek()).value;
		 RESULT = new Assignation(i, e, false, iright, ileft-1); 
              CUP$MusicParser$result = parser.getSymbolFactory().newSymbol("assignation",21, ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-2)), ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), RESULT);
            }
          return CUP$MusicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // assignation ::= ID PLUSEQ expression 
            {
              Assignation RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$MusicParser$stack.peek()).value;
		 RESULT = new Assignation(i, e, true, iright, ileft-1); 
              CUP$MusicParser$result = parser.getSymbolFactory().newSymbol("assignation",21, ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-2)), ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), RESULT);
            }
          return CUP$MusicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // assignation ::= ID dimension_list EQ expression 
            {
              Assignation RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-3)).value;
		int dlleft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-2)).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-2)).right;
		LinkedList<Expression> dl = (LinkedList<Expression>)((java_cup.runtime.Symbol) CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$MusicParser$stack.peek()).value;
		 RESULT = new Assignation(new Array(iright, ileft-1, i, dl)); 
              CUP$MusicParser$result = parser.getSymbolFactory().newSymbol("assignation",21, ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-3)), ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), RESULT);
            }
          return CUP$MusicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // principal_function ::= PRINCIPAL PA PC block 
            {
              PrincipalFunction RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-3)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-3)).value;
		int illeft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).right;
		LinkedList<Instruction> il = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$MusicParser$stack.peek()).value;
		 RESULT = new PrincipalFunction(il, pright, pleft-1); 
              CUP$MusicParser$result = parser.getSymbolFactory().newSymbol("principal_function",22, ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-3)), ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), RESULT);
            }
          return CUP$MusicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // principal_function ::= KEEP PRINCIPAL PA PC block 
            {
              PrincipalFunction RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-4)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-4)).value;
		int illeft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).right;
		LinkedList<Instruction> il = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$MusicParser$stack.peek()).value;
		 RESULT = new PrincipalFunction(il, pright, pleft-1); 
              CUP$MusicParser$result = parser.getSymbolFactory().newSymbol("principal_function",22, ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-4)), ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), RESULT);
            }
          return CUP$MusicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // if_ins ::= SI PA expression PC block 
            {
              If RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-4)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-2)).value;
		int illeft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).right;
		LinkedList<Instruction> il = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$MusicParser$stack.peek()).value;
		 RESULT = new If(null, e, il, null, sright, sleft-1); 
              CUP$MusicParser$result = parser.getSymbolFactory().newSymbol("if_ins",23, ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-4)), ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), RESULT);
            }
          return CUP$MusicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // if_ins ::= SI PA expression PC block else_ins 
            {
              If RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-5)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-3)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-3)).value;
		int illeft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)).right;
		LinkedList<Instruction> il = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)).value;
		int eileft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).left;
		int eiright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).right;
		If ei = (If)((java_cup.runtime.Symbol) CUP$MusicParser$stack.peek()).value;
		 RESULT = new If(ei, e, il, null, sright, sleft-1); 
              CUP$MusicParser$result = parser.getSymbolFactory().newSymbol("if_ins",23, ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-5)), ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), RESULT);
            }
          return CUP$MusicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // if_ins ::= SI PA expression PC block else_if 
            {
              If RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-5)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-3)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-3)).value;
		int illeft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)).right;
		LinkedList<Instruction> il = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).right;
		LinkedList<If> el = (LinkedList<If>)((java_cup.runtime.Symbol) CUP$MusicParser$stack.peek()).value;
		 RESULT = new If(null, e, il, el, sright, sleft-1); 
              CUP$MusicParser$result = parser.getSymbolFactory().newSymbol("if_ins",23, ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-5)), ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), RESULT);
            }
          return CUP$MusicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // if_ins ::= SI PA expression PC block else_if else_ins 
            {
              If RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-6)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-6)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-4)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-4)).value;
		int illeft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-2)).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-2)).right;
		LinkedList<Instruction> il = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-2)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)).right;
		LinkedList<If> el = (LinkedList<If>)((java_cup.runtime.Symbol) CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)).value;
		int eileft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).left;
		int eiright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).right;
		If ei = (If)((java_cup.runtime.Symbol) CUP$MusicParser$stack.peek()).value;
		 RESULT = new If(ei, e, il, el, sright, sleft-1); 
              CUP$MusicParser$result = parser.getSymbolFactory().newSymbol("if_ins",23, ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-6)), ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), RESULT);
            }
          return CUP$MusicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // else_ins ::= SINO block 
            {
              If RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)).value;
		int illeft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).right;
		LinkedList<Instruction> il = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$MusicParser$stack.peek()).value;
		 RESULT = new If(null, null, il, null, sright, sleft-1); 
              CUP$MusicParser$result = parser.getSymbolFactory().newSymbol("else_ins",24, ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)), ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), RESULT);
            }
          return CUP$MusicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // else_if ::= else_if SINO SI PA expression PC block 
            {
              LinkedList<If> RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-6)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-6)).right;
		LinkedList<If> el = (LinkedList<If>)((java_cup.runtime.Symbol) CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-6)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-5)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-2)).value;
		int illeft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).right;
		LinkedList<Instruction> il = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$MusicParser$stack.peek()).value;
		 RESULT = el; RESULT.add(new If(null, e, il, null, sright, sleft-1)); 
              CUP$MusicParser$result = parser.getSymbolFactory().newSymbol("else_if",25, ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-6)), ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), RESULT);
            }
          return CUP$MusicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // else_if ::= SINO SI PA expression PC block 
            {
              LinkedList<If> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-5)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-2)).value;
		int illeft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).right;
		LinkedList<Instruction> il = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$MusicParser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(new If(null, e, il, null, sright, sleft-1)); 
              CUP$MusicParser$result = parser.getSymbolFactory().newSymbol("else_if",25, ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-5)), ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), RESULT);
            }
          return CUP$MusicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // for_ins ::= PARA PA assignation SEMICOLON expression SEMICOLON assignation PC block 
            {
              For RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-8)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-8)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-8)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-6)).right;
		Assignation a = (Assignation)((java_cup.runtime.Symbol) CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-4)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-4)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-2)).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-2)).right;
		Assignation a2 = (Assignation)((java_cup.runtime.Symbol) CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-2)).value;
		int illeft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).right;
		LinkedList<Instruction> il = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$MusicParser$stack.peek()).value;
		 RESULT = new For(a, e, a2, il, pright, pleft-1); 
              CUP$MusicParser$result = parser.getSymbolFactory().newSymbol("for_ins",26, ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-8)), ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), RESULT);
            }
          return CUP$MusicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // for_ins ::= PARA PA assignation SEMICOLON expression SEMICOLON inc_dec PC block 
            {
              For RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-8)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-8)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-8)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-6)).right;
		Assignation a = (Assignation)((java_cup.runtime.Symbol) CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-4)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-4)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-2)).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-2)).right;
		Expression a2 = (Expression)((java_cup.runtime.Symbol) CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-2)).value;
		int illeft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).right;
		LinkedList<Instruction> il = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$MusicParser$stack.peek()).value;
		 RESULT = new For(a, e, a2, il, pright, pleft-1); 
              CUP$MusicParser$result = parser.getSymbolFactory().newSymbol("for_ins",26, ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-8)), ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), RESULT);
            }
          return CUP$MusicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // for_ins ::= PARA PA dec_simple SEMICOLON expression SEMICOLON assignation PC block 
            {
              For RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-8)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-8)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-8)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-6)).right;
		Declaration a = (Declaration)((java_cup.runtime.Symbol) CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-4)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-4)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-2)).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-2)).right;
		Assignation a2 = (Assignation)((java_cup.runtime.Symbol) CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-2)).value;
		int illeft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).right;
		LinkedList<Instruction> il = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$MusicParser$stack.peek()).value;
		 RESULT = new For(a, e, a2, il, pright, pleft-1); 
              CUP$MusicParser$result = parser.getSymbolFactory().newSymbol("for_ins",26, ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-8)), ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), RESULT);
            }
          return CUP$MusicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // for_ins ::= PARA PA dec_simple SEMICOLON expression SEMICOLON inc_dec PC block 
            {
              For RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-8)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-8)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-8)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-6)).right;
		Declaration a = (Declaration)((java_cup.runtime.Symbol) CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-4)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-4)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-2)).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-2)).right;
		Expression a2 = (Expression)((java_cup.runtime.Symbol) CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-2)).value;
		int illeft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).right;
		LinkedList<Instruction> il = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$MusicParser$stack.peek()).value;
		 RESULT = new For(a, e, a2, il, pright, pleft-1); 
              CUP$MusicParser$result = parser.getSymbolFactory().newSymbol("for_ins",26, ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-8)), ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), RESULT);
            }
          return CUP$MusicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // inc_dec ::= ID PP 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)).value;
		 RESULT = new Expression(ExpressionType.increase, null, null, i, iright, ileft-1); 
              CUP$MusicParser$result = parser.getSymbolFactory().newSymbol("inc_dec",30, ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)), ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), RESULT);
            }
          return CUP$MusicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // inc_dec ::= ID RR 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)).value;
		 RESULT = new Expression(ExpressionType.decrease, null, null, i, iright, ileft-1); 
              CUP$MusicParser$result = parser.getSymbolFactory().newSymbol("inc_dec",30, ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)), ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), RESULT);
            }
          return CUP$MusicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // while_ins ::= WHILE PA expression PC block 
            {
              While RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-4)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-4)).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-2)).value;
		int illeft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).right;
		LinkedList<Instruction> il = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$MusicParser$stack.peek()).value;
		 RESULT = new While(e, il, mright, mleft-1); 
              CUP$MusicParser$result = parser.getSymbolFactory().newSymbol("while_ins",27, ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-4)), ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), RESULT);
            }
          return CUP$MusicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // do_while ::= HACER block WHILE PA expression PC SL 
            {
              DoWhile RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-6)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-6)).right;
		String h = (String)((java_cup.runtime.Symbol) CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-6)).value;
		int illeft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-5)).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-5)).right;
		LinkedList<Instruction> il = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-2)).value;
		 RESULT = new DoWhile(e, il, hright, hleft-1); 
              CUP$MusicParser$result = parser.getSymbolFactory().newSymbol("do_while",28, ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-6)), ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), RESULT);
            }
          return CUP$MusicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // switch_ins ::= SWITCH PA expression PC SL case_list 
            {
              Switch RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-5)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-3)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-3)).value;
		int clleft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).left;
		int clright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).right;
		LinkedList<Case> cl = (LinkedList<Case>)((java_cup.runtime.Symbol) CUP$MusicParser$stack.peek()).value;
		 RESULT = new Switch(e, cl, sright, sleft-1); 
              CUP$MusicParser$result = parser.getSymbolFactory().newSymbol("switch_ins",29, ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-5)), ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), RESULT);
            }
          return CUP$MusicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // case_list ::= case_list CASE expression block 
            {
              LinkedList<Case> RESULT =null;
		int clleft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-3)).left;
		int clright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-3)).right;
		LinkedList<Case> cl = (LinkedList<Case>)((java_cup.runtime.Symbol) CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)).value;
		int illeft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).right;
		LinkedList<Instruction> il = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$MusicParser$stack.peek()).value;
		 RESULT = cl; RESULT.add(new Case(e, il, cright, cleft-1)); 
              CUP$MusicParser$result = parser.getSymbolFactory().newSymbol("case_list",32, ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-3)), ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), RESULT);
            }
          return CUP$MusicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // case_list ::= case_list DEF block 
            {
              LinkedList<Case> RESULT =null;
		int clleft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-2)).left;
		int clright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-2)).right;
		LinkedList<Case> cl = (LinkedList<Case>)((java_cup.runtime.Symbol) CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)).value;
		int illeft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).right;
		LinkedList<Instruction> il = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$MusicParser$stack.peek()).value;
		 RESULT = cl; RESULT.add(new Case(null, il, cright, cleft-1)); 
              CUP$MusicParser$result = parser.getSymbolFactory().newSymbol("case_list",32, ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-2)), ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), RESULT);
            }
          return CUP$MusicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // case_list ::= CASE expression block 
            {
              LinkedList<Case> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)).value;
		int illeft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).right;
		LinkedList<Instruction> il = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$MusicParser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(new Case(e, il, cright, cleft-1)); 
              CUP$MusicParser$result = parser.getSymbolFactory().newSymbol("case_list",32, ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-2)), ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), RESULT);
            }
          return CUP$MusicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // function ::= d_type function_id PA PC block 
            {
              Function RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-4)).right;
		EnumType t = (EnumType)((java_cup.runtime.Symbol) CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-3)).value;
		int illeft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).right;
		LinkedList<Instruction> il = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$MusicParser$stack.peek()).value;
		 RESULT = new Function(t, i, null, il, false, tright, tleft-1); 
              CUP$MusicParser$result = parser.getSymbolFactory().newSymbol("function",34, ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-4)), ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), RESULT);
            }
          return CUP$MusicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // function ::= d_type function_id PA param_list PC block 
            {
              Function RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-5)).right;
		EnumType t = (EnumType)((java_cup.runtime.Symbol) CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-4)).value;
		int plleft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-2)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-2)).right;
		LinkedList<Declaration> pl = (LinkedList<Declaration>)((java_cup.runtime.Symbol) CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-2)).value;
		int illeft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).right;
		LinkedList<Instruction> il = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$MusicParser$stack.peek()).value;
		 RESULT = new Function(t, i, pl, il, false, tright, tleft-1); 
              CUP$MusicParser$result = parser.getSymbolFactory().newSymbol("function",34, ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-5)), ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), RESULT);
            }
          return CUP$MusicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // function ::= function_id PA PC block 
            {
              Function RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-3)).value;
		int illeft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).right;
		LinkedList<Instruction> il = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$MusicParser$stack.peek()).value;
		 RESULT = new Function(null, i, null, il, false, iright, ileft-1); 
              CUP$MusicParser$result = parser.getSymbolFactory().newSymbol("function",34, ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-3)), ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), RESULT);
            }
          return CUP$MusicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // function ::= function_id PA param_list PC block 
            {
              Function RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-4)).value;
		int plleft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-2)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-2)).right;
		LinkedList<Declaration> pl = (LinkedList<Declaration>)((java_cup.runtime.Symbol) CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-2)).value;
		int illeft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).right;
		LinkedList<Instruction> il = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$MusicParser$stack.peek()).value;
		 RESULT = new Function(null, i, pl, il, false, iright, ileft-1); 
              CUP$MusicParser$result = parser.getSymbolFactory().newSymbol("function",34, ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-4)), ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), RESULT);
            }
          return CUP$MusicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // function ::= KEEP d_type function_id PA PC block 
            {
              Function RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-5)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-5)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-4)).right;
		EnumType t = (EnumType)((java_cup.runtime.Symbol) CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-3)).value;
		int illeft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).right;
		LinkedList<Instruction> il = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$MusicParser$stack.peek()).value;
		 RESULT = new Function(t, i, null, il, true, tright, tleft-1); 
              CUP$MusicParser$result = parser.getSymbolFactory().newSymbol("function",34, ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-5)), ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), RESULT);
            }
          return CUP$MusicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // function ::= KEEP d_type function_id PA param_list PC block 
            {
              Function RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-6)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-6)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-6)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-5)).right;
		EnumType t = (EnumType)((java_cup.runtime.Symbol) CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-4)).value;
		int plleft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-2)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-2)).right;
		LinkedList<Declaration> pl = (LinkedList<Declaration>)((java_cup.runtime.Symbol) CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-2)).value;
		int illeft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).right;
		LinkedList<Instruction> il = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$MusicParser$stack.peek()).value;
		 RESULT = new Function(t, i, pl, il, true, tright, tleft-1); 
              CUP$MusicParser$result = parser.getSymbolFactory().newSymbol("function",34, ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-6)), ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), RESULT);
            }
          return CUP$MusicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // function ::= KEEP function_id PA PC block 
            {
              Function RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-4)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-4)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-3)).value;
		int illeft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).right;
		LinkedList<Instruction> il = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$MusicParser$stack.peek()).value;
		 RESULT = new Function(null, i, null, il, true, iright, ileft-1); 
              CUP$MusicParser$result = parser.getSymbolFactory().newSymbol("function",34, ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-4)), ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), RESULT);
            }
          return CUP$MusicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // function ::= KEEP function_id PA param_list PC block 
            {
              Function RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-5)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-5)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-4)).value;
		int plleft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-2)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-2)).right;
		LinkedList<Declaration> pl = (LinkedList<Declaration>)((java_cup.runtime.Symbol) CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-2)).value;
		int illeft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).right;
		LinkedList<Instruction> il = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$MusicParser$stack.peek()).value;
		 RESULT = new Function(null, i, pl, il, true, iright, ileft-1); 
              CUP$MusicParser$result = parser.getSymbolFactory().newSymbol("function",34, ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-5)), ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), RESULT);
            }
          return CUP$MusicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // function_id ::= ID 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$MusicParser$stack.peek()).value;
		 RESULT = i; 
              CUP$MusicParser$result = parser.getSymbolFactory().newSymbol("function_id",35, ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), RESULT);
            }
          return CUP$MusicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // function_id ::= PLAY 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$MusicParser$stack.peek()).value;
		 RESULT = i; 
              CUP$MusicParser$result = parser.getSymbolFactory().newSymbol("function_id",35, ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), RESULT);
            }
          return CUP$MusicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // function_id ::= WAIT 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$MusicParser$stack.peek()).value;
		 RESULT = i; 
              CUP$MusicParser$result = parser.getSymbolFactory().newSymbol("function_id",35, ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), RESULT);
            }
          return CUP$MusicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // function_id ::= ORDER 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$MusicParser$stack.peek()).value;
		 RESULT = i; 
              CUP$MusicParser$result = parser.getSymbolFactory().newSymbol("function_id",35, ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), RESULT);
            }
          return CUP$MusicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // function_id ::= SUM 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$MusicParser$stack.peek()).value;
		 RESULT = i; 
              CUP$MusicParser$result = parser.getSymbolFactory().newSymbol("function_id",35, ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), RESULT);
            }
          return CUP$MusicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // function_id ::= LONG 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$MusicParser$stack.peek()).value;
		 RESULT = i; 
              CUP$MusicParser$result = parser.getSymbolFactory().newSymbol("function_id",35, ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), RESULT);
            }
          return CUP$MusicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // function_id ::= MENSAJE 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$MusicParser$stack.peek()).value;
		 RESULT = i; 
              CUP$MusicParser$result = parser.getSymbolFactory().newSymbol("function_id",35, ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), RESULT);
            }
          return CUP$MusicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // param_list ::= param_list COMMA d_type ID 
            {
              LinkedList<Declaration> RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-3)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-3)).right;
		LinkedList<Declaration> pl = (LinkedList<Declaration>)((java_cup.runtime.Symbol) CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)).right;
		EnumType t = (EnumType)((java_cup.runtime.Symbol) CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$MusicParser$stack.peek()).value;
		 RESULT = pl; RESULT.add(new Declaration(t, i, null, tright, tleft-1, false)); 
              CUP$MusicParser$result = parser.getSymbolFactory().newSymbol("param_list",36, ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-3)), ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), RESULT);
            }
          return CUP$MusicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // param_list ::= d_type ID 
            {
              LinkedList<Declaration> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)).right;
		EnumType t = (EnumType)((java_cup.runtime.Symbol) CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$MusicParser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(new Declaration(t, i, null, tright, tleft-1, false)); 
              CUP$MusicParser$result = parser.getSymbolFactory().newSymbol("param_list",36, ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)), ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), RESULT);
            }
          return CUP$MusicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // notes ::= DO 
            {
              NoteType RESULT =null;
		 RESULT = NoteType.do_; 
              CUP$MusicParser$result = parser.getSymbolFactory().newSymbol("notes",33, ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), RESULT);
            }
          return CUP$MusicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // notes ::= RE 
            {
              NoteType RESULT =null;
		 RESULT = NoteType.re; 
              CUP$MusicParser$result = parser.getSymbolFactory().newSymbol("notes",33, ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), RESULT);
            }
          return CUP$MusicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // notes ::= MI 
            {
              NoteType RESULT =null;
		 RESULT = NoteType.mi; 
              CUP$MusicParser$result = parser.getSymbolFactory().newSymbol("notes",33, ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), RESULT);
            }
          return CUP$MusicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // notes ::= FA 
            {
              NoteType RESULT =null;
		 RESULT = NoteType.fa; 
              CUP$MusicParser$result = parser.getSymbolFactory().newSymbol("notes",33, ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), RESULT);
            }
          return CUP$MusicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // notes ::= SOL 
            {
              NoteType RESULT =null;
		 RESULT = NoteType.sol; 
              CUP$MusicParser$result = parser.getSymbolFactory().newSymbol("notes",33, ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), RESULT);
            }
          return CUP$MusicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // notes ::= LA 
            {
              NoteType RESULT =null;
		 RESULT = NoteType.la; 
              CUP$MusicParser$result = parser.getSymbolFactory().newSymbol("notes",33, ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), RESULT);
            }
          return CUP$MusicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // notes ::= SI 
            {
              NoteType RESULT =null;
		 RESULT = NoteType.si; 
              CUP$MusicParser$result = parser.getSymbolFactory().newSymbol("notes",33, ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), RESULT);
            }
          return CUP$MusicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // notes ::= DO8 
            {
              NoteType RESULT =null;
		 RESULT = NoteType.do8; 
              CUP$MusicParser$result = parser.getSymbolFactory().newSymbol("notes",33, ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), RESULT);
            }
          return CUP$MusicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // notes ::= RE8 
            {
              NoteType RESULT =null;
		 RESULT = NoteType.re8; 
              CUP$MusicParser$result = parser.getSymbolFactory().newSymbol("notes",33, ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), RESULT);
            }
          return CUP$MusicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // notes ::= MI8 
            {
              NoteType RESULT =null;
		 RESULT = NoteType.mi8; 
              CUP$MusicParser$result = parser.getSymbolFactory().newSymbol("notes",33, ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), RESULT);
            }
          return CUP$MusicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // notes ::= FA8 
            {
              NoteType RESULT =null;
		 RESULT = NoteType.fa8; 
              CUP$MusicParser$result = parser.getSymbolFactory().newSymbol("notes",33, ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), RESULT);
            }
          return CUP$MusicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // notes ::= SOL8 
            {
              NoteType RESULT =null;
		 RESULT = NoteType.sol8; 
              CUP$MusicParser$result = parser.getSymbolFactory().newSymbol("notes",33, ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), RESULT);
            }
          return CUP$MusicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // notes ::= LA8 
            {
              NoteType RESULT =null;
		 RESULT = NoteType.la8; 
              CUP$MusicParser$result = parser.getSymbolFactory().newSymbol("notes",33, ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), RESULT);
            }
          return CUP$MusicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // notes ::= SI8 
            {
              NoteType RESULT =null;
		 RESULT = NoteType.si8; 
              CUP$MusicParser$result = parser.getSymbolFactory().newSymbol("notes",33, ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), RESULT);
            }
          return CUP$MusicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // expression ::= expression PLUS expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$MusicParser$stack.peek()).value;
		 RESULT = new Expression(ExpressionType.sum, e1, e2, null, pright, pleft-1); 
              CUP$MusicParser$result = parser.getSymbolFactory().newSymbol("expression",31, ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-2)), ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), RESULT);
            }
          return CUP$MusicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // expression ::= expression REST expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$MusicParser$stack.peek()).value;
		 RESULT = new Expression(ExpressionType.rest, e1, e2, null, pright, pleft-1); 
              CUP$MusicParser$result = parser.getSymbolFactory().newSymbol("expression",31, ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-2)), ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), RESULT);
            }
          return CUP$MusicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // expression ::= expression MULT expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$MusicParser$stack.peek()).value;
		 RESULT = new Expression(ExpressionType.multiplication, e1, e2, null, pright, pleft-1); 
              CUP$MusicParser$result = parser.getSymbolFactory().newSymbol("expression",31, ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-2)), ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), RESULT);
            }
          return CUP$MusicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // expression ::= expression DIV expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$MusicParser$stack.peek()).value;
		 RESULT = new Expression(ExpressionType.division, e1, e2, null, pright, pleft-1); 
              CUP$MusicParser$result = parser.getSymbolFactory().newSymbol("expression",31, ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-2)), ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), RESULT);
            }
          return CUP$MusicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // expression ::= expression MOD expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$MusicParser$stack.peek()).value;
		 RESULT = new Expression(ExpressionType.modulo, e1, e2, null, pright, pleft-1); 
              CUP$MusicParser$result = parser.getSymbolFactory().newSymbol("expression",31, ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-2)), ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), RESULT);
            }
          return CUP$MusicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // expression ::= expression POT expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$MusicParser$stack.peek()).value;
		 RESULT = new Expression(ExpressionType.potencia, e1, e2, null, pright, pleft-1); 
              CUP$MusicParser$result = parser.getSymbolFactory().newSymbol("expression",31, ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-2)), ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), RESULT);
            }
          return CUP$MusicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // expression ::= expression SAME expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$MusicParser$stack.peek()).value;
		 RESULT = new Expression(ExpressionType.equal, e1, e2, null, pright, pleft-1); 
              CUP$MusicParser$result = parser.getSymbolFactory().newSymbol("expression",31, ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-2)), ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), RESULT);
            }
          return CUP$MusicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // expression ::= expression NEQ expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$MusicParser$stack.peek()).value;
		 RESULT = new Expression(ExpressionType.different, e1, e2, null, pright, pleft-1); 
              CUP$MusicParser$result = parser.getSymbolFactory().newSymbol("expression",31, ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-2)), ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), RESULT);
            }
          return CUP$MusicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // expression ::= expression MAY expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$MusicParser$stack.peek()).value;
		 RESULT = new Expression(ExpressionType.greater_than, e1, e2, null, pright, pleft-1); 
              CUP$MusicParser$result = parser.getSymbolFactory().newSymbol("expression",31, ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-2)), ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), RESULT);
            }
          return CUP$MusicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // expression ::= expression MEN expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$MusicParser$stack.peek()).value;
		 RESULT = new Expression(ExpressionType.smaller_than, e1, e2, null, pright, pleft-1); 
              CUP$MusicParser$result = parser.getSymbolFactory().newSymbol("expression",31, ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-2)), ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), RESULT);
            }
          return CUP$MusicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // expression ::= expression MAYEQ expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$MusicParser$stack.peek()).value;
		 RESULT = new Expression(ExpressionType.greater_equal, e1, e2, null, pright, pleft-1); 
              CUP$MusicParser$result = parser.getSymbolFactory().newSymbol("expression",31, ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-2)), ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), RESULT);
            }
          return CUP$MusicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // expression ::= expression MENEQ expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$MusicParser$stack.peek()).value;
		 RESULT = new Expression(ExpressionType.smaller_equal, e1, e2, null, pright, pleft-1); 
              CUP$MusicParser$result = parser.getSymbolFactory().newSymbol("expression",31, ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-2)), ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), RESULT);
            }
          return CUP$MusicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // expression ::= expression AND expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$MusicParser$stack.peek()).value;
		 RESULT = new Expression(ExpressionType.and, e1, e2, null, pright, pleft-1); 
              CUP$MusicParser$result = parser.getSymbolFactory().newSymbol("expression",31, ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-2)), ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), RESULT);
            }
          return CUP$MusicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // expression ::= expression NAND expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$MusicParser$stack.peek()).value;
		 RESULT = new Expression(ExpressionType.nand, e1, e2, null, pright, pleft-1); 
              CUP$MusicParser$result = parser.getSymbolFactory().newSymbol("expression",31, ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-2)), ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), RESULT);
            }
          return CUP$MusicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // expression ::= expression OR expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$MusicParser$stack.peek()).value;
		 RESULT = new Expression(ExpressionType.or, e1, e2, null, pright, pleft-1); 
              CUP$MusicParser$result = parser.getSymbolFactory().newSymbol("expression",31, ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-2)), ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), RESULT);
            }
          return CUP$MusicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // expression ::= expression NOR expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$MusicParser$stack.peek()).value;
		 RESULT = new Expression(ExpressionType.nor, e1, e2, null, pright, pleft-1); 
              CUP$MusicParser$result = parser.getSymbolFactory().newSymbol("expression",31, ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-2)), ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), RESULT);
            }
          return CUP$MusicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // expression ::= expression XOR expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$MusicParser$stack.peek()).value;
		 RESULT = new Expression(ExpressionType.xor, e1, e2, null, pright, pleft-1); 
              CUP$MusicParser$result = parser.getSymbolFactory().newSymbol("expression",31, ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-2)), ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), RESULT);
            }
          return CUP$MusicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // expression ::= NULO expression 
            {
              Expression RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$MusicParser$stack.peek()).value;
		 RESULT = new Expression(ExpressionType.is_null, e1, null, null, pright, pleft-1); 
              CUP$MusicParser$result = parser.getSymbolFactory().newSymbol("expression",31, ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)), ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), RESULT);
            }
          return CUP$MusicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // expression ::= NOT expression 
            {
              Expression RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$MusicParser$stack.peek()).value;
		 RESULT = new Expression(ExpressionType.not, e1, null, null, pright, pleft-1); 
              CUP$MusicParser$result = parser.getSymbolFactory().newSymbol("expression",31, ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)), ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), RESULT);
            }
          return CUP$MusicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // expression ::= REST expression 
            {
              Expression RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$MusicParser$stack.peek()).value;
		 RESULT = new Expression(ExpressionType.negative, e1, null, null, pright, pleft-1); 
              CUP$MusicParser$result = parser.getSymbolFactory().newSymbol("expression",31, ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)), ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), RESULT);
            }
          return CUP$MusicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // expression ::= PA expression PC 
            {
              Expression RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-2)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)).value;
		 RESULT = e1; 
              CUP$MusicParser$result = parser.getSymbolFactory().newSymbol("expression",31, ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-2)), ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), RESULT);
            }
          return CUP$MusicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // expression ::= ENTERO 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$MusicParser$stack.peek()).value;
		 RESULT = new Expression(ExpressionType.integer, null, null, (long) e, eright, eleft-1); 
              CUP$MusicParser$result = parser.getSymbolFactory().newSymbol("expression",31, ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), RESULT);
            }
          return CUP$MusicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // expression ::= DOBLE 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).right;
		Double e = (Double)((java_cup.runtime.Symbol) CUP$MusicParser$stack.peek()).value;
		 RESULT = new Expression(ExpressionType.doble, null, null, e, eright, eleft-1); 
              CUP$MusicParser$result = parser.getSymbolFactory().newSymbol("expression",31, ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), RESULT);
            }
          return CUP$MusicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // expression ::= CADENA 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$MusicParser$stack.peek()).value;
		 RESULT = new Expression(ExpressionType.string, null, null, e, eright, eleft-1); 
              CUP$MusicParser$result = parser.getSymbolFactory().newSymbol("expression",31, ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), RESULT);
            }
          return CUP$MusicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // expression ::= CARACTER 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$MusicParser$stack.peek()).value;
		 RESULT = new Expression(ExpressionType.character, null, null, e.charAt(1), eright, eleft-1); 
              CUP$MusicParser$result = parser.getSymbolFactory().newSymbol("expression",31, ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), RESULT);
            }
          return CUP$MusicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // expression ::= ID 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$MusicParser$stack.peek()).value;
		 RESULT = new Expression(ExpressionType.id, null, null, e, eright, eleft-1); 
              CUP$MusicParser$result = parser.getSymbolFactory().newSymbol("expression",31, ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), RESULT);
            }
          return CUP$MusicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // expression ::= ID dimension_list 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)).value;
		int dlleft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).right;
		LinkedList<Expression> dl = (LinkedList<Expression>)((java_cup.runtime.Symbol) CUP$MusicParser$stack.peek()).value;
		 RESULT = new Expression(ExpressionType.array, new Array(eright, eleft-1,e, dl)); 
              CUP$MusicParser$result = parser.getSymbolFactory().newSymbol("expression",31, ((java_cup.runtime.Symbol)CUP$MusicParser$stack.elementAt(CUP$MusicParser$top-1)), ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), RESULT);
            }
          return CUP$MusicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // expression ::= TRUE 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$MusicParser$stack.peek()).value;
		 RESULT = new Expression(ExpressionType.bool, null, null, true, eright, eleft-1); 
              CUP$MusicParser$result = parser.getSymbolFactory().newSymbol("expression",31, ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), RESULT);
            }
          return CUP$MusicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // expression ::= FALSE 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$MusicParser$stack.peek()).value;
		 RESULT = new Expression(ExpressionType.bool, null, null, false, eright, eleft-1); 
              CUP$MusicParser$result = parser.getSymbolFactory().newSymbol("expression",31, ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), RESULT);
            }
          return CUP$MusicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // expression ::= inc_dec 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$MusicParser$stack.peek()).value;
		 RESULT = e; 
              CUP$MusicParser$result = parser.getSymbolFactory().newSymbol("expression",31, ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MusicParser$stack.peek()), RESULT);
            }
          return CUP$MusicParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$MusicParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$MusicParser$do_action(
    int                        CUP$MusicParser$act_num,
    java_cup.runtime.lr_parser CUP$MusicParser$parser,
    java.util.Stack            CUP$MusicParser$stack,
    int                        CUP$MusicParser$top)
    throws java.lang.Exception
    {
              return CUP$MusicParser$do_action_part00000000(
                               CUP$MusicParser$act_num,
                               CUP$MusicParser$parser,
                               CUP$MusicParser$stack,
                               CUP$MusicParser$top);
    }
}

}
